################################################## 
# AWSECommerceService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://webservices.amazon.com/AWSECommerceService/2007-01-15
##############################

class ns0:
    targetNamespace = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"

    class HelpRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "HelpRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.HelpRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"About"), aname="_About", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.HelpType_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._About = None
                    self._HelpType = None
                    self._ResponseGroup = []
                    return
            Holder.__name__ = "HelpRequest_Holder"
            self.pyclass = Holder


        class HelpType_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "HelpType"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","HelpType")
                kw["aname"] = "_HelpType"
                ZSI.TC.String.__init__(self, **kw)




    class ItemSearchRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "ItemSearchRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ItemSearchRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Actor"), aname="_Actor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Artist"), aname="_Artist", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Availability_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","AudienceRating",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Author"), aname="_Author", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Brand"), aname="_Brand", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BrowseNode"), aname="_BrowseNode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"City"), aname="_City", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Composer"), aname="_Composer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Condition",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Conductor"), aname="_Conductor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"Count"), aname="_Count", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Cuisine"), aname="_Cuisine", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DeliveryMethod",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Director"), aname="_Director", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FutureLaunchDate"), aname="_FutureLaunchDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ISPUPostalCode"), aname="_ISPUPostalCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"ItemPage"), aname="_ItemPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Keywords"), aname="_Keywords", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Manufacturer"), aname="_Manufacturer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"MaximumPrice"), aname="_MaximumPrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MerchantId"), aname="_MerchantId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"MinimumPrice"), aname="_MinimumPrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MusicLabel"), aname="_MusicLabel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Neighborhood"), aname="_Neighborhood", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Orchestra"), aname="_Orchestra", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PostalCode"), aname="_PostalCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Power"), aname="_Power", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Publisher"), aname="_Publisher", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReviewSort"), aname="_ReviewSort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SearchIndex"), aname="_SearchIndex", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Sort"), aname="_Sort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"State"), aname="_State", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TextStream"), aname="_TextStream", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReleaseDate"), aname="_ReleaseDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Actor = None
                    self._Artist = None
                    self._Availability = None
                    self._AudienceRating = None
                    self._Author = None
                    self._Brand = None
                    self._BrowseNode = None
                    self._City = None
                    self._Composer = None
                    self._Condition = None
                    self._Conductor = None
                    self._Count = None
                    self._Cuisine = None
                    self._DeliveryMethod = None
                    self._Director = None
                    self._FutureLaunchDate = None
                    self._ISPUPostalCode = None
                    self._ItemPage = None
                    self._Keywords = None
                    self._Manufacturer = None
                    self._MaximumPrice = None
                    self._MerchantId = None
                    self._MinimumPrice = None
                    self._MusicLabel = None
                    self._Neighborhood = None
                    self._Orchestra = None
                    self._PostalCode = None
                    self._Power = None
                    self._Publisher = None
                    self._ResponseGroup = []
                    self._ReviewSort = None
                    self._SearchIndex = None
                    self._Sort = None
                    self._State = None
                    self._TextStream = None
                    self._Title = None
                    self._ReleaseDate = None
                    return
            Holder.__name__ = "ItemSearchRequest_Holder"
            self.pyclass = Holder


        class Availability_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "Availability"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Availability")
                kw["aname"] = "_Availability"
                ZSI.TC.String.__init__(self, **kw)




    class ItemLookupRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "ItemLookupRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ItemLookupRequest_Def.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Condition",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DeliveryMethod",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FutureLaunchDate"), aname="_FutureLaunchDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.IdType_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ISPUPostalCode"), aname="_ISPUPostalCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MerchantId"), aname="_MerchantId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"OfferPage"), aname="_OfferPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ItemId"), aname="_ItemId", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"ReviewPage"), aname="_ReviewPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReviewSort"), aname="_ReviewSort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SearchIndex"), aname="_SearchIndex", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SearchInsideKeywords"), aname="_SearchInsideKeywords", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","positiveIntegerOrAll",lazy=True)(pname=(ns,"VariationPage"), aname="_VariationPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Condition = None
                    self._DeliveryMethod = None
                    self._FutureLaunchDate = None
                    self._IdType = None
                    self._ISPUPostalCode = None
                    self._MerchantId = None
                    self._OfferPage = None
                    self._ItemId = []
                    self._ResponseGroup = []
                    self._ReviewPage = None
                    self._ReviewSort = None
                    self._SearchIndex = None
                    self._SearchInsideKeywords = None
                    self._VariationPage = None
                    return
            Holder.__name__ = "ItemLookupRequest_Holder"
            self.pyclass = Holder


        class IdType_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "IdType"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","IdType")
                kw["aname"] = "_IdType"
                ZSI.TC.String.__init__(self, **kw)




    class ListSearchRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "ListSearchRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ListSearchRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"City"), aname="_City", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Email"), aname="_Email", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FirstName"), aname="_FirstName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LastName"), aname="_LastName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"ListPage"), aname="_ListPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.ListType_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"State"), aname="_State", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._City = None
                    self._Email = None
                    self._FirstName = None
                    self._LastName = None
                    self._ListPage = None
                    self._ListType = None
                    self._Name = None
                    self._ResponseGroup = []
                    self._State = None
                    return
            Holder.__name__ = "ListSearchRequest_Holder"
            self.pyclass = Holder


        class ListType_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "ListType"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListType")
                kw["aname"] = "_ListType"
                ZSI.TC.String.__init__(self, **kw)




    class ListLookupRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "ListLookupRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ListLookupRequest_Def.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Condition",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DeliveryMethod",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ISPUPostalCode"), aname="_ISPUPostalCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ListId"), aname="_ListId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.ListType_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MerchantId"), aname="_MerchantId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProductGroup"), aname="_ProductGroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"ProductPage"), aname="_ProductPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReviewSort"), aname="_ReviewSort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Sort"), aname="_Sort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Condition = None
                    self._DeliveryMethod = None
                    self._ISPUPostalCode = None
                    self._ListId = None
                    self._ListType = None
                    self._MerchantId = None
                    self._ProductGroup = None
                    self._ProductPage = None
                    self._ResponseGroup = []
                    self._ReviewSort = None
                    self._Sort = None
                    return
            Holder.__name__ = "ListLookupRequest_Holder"
            self.pyclass = Holder


        class ListType_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "ListType"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListType")
                kw["aname"] = "_ListType"
                ZSI.TC.String.__init__(self, **kw)




    class CustomerContentSearchRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "CustomerContentSearchRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CustomerContentSearchRequest_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"CustomerPage"), aname="_CustomerPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Email"), aname="_Email", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CustomerPage = None
                    self._Email = None
                    self._Name = None
                    self._ResponseGroup = []
                    return
            Holder.__name__ = "CustomerContentSearchRequest_Holder"
            self.pyclass = Holder

    class CustomerContentLookupRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "CustomerContentLookupRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CustomerContentLookupRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"CustomerId"), aname="_CustomerId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"ReviewPage"), aname="_ReviewPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CustomerId = None
                    self._ResponseGroup = []
                    self._ReviewPage = None
                    return
            Holder.__name__ = "CustomerContentLookupRequest_Holder"
            self.pyclass = Holder

    class SimilarityLookupRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "SimilarityLookupRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SimilarityLookupRequest_Def.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Condition",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DeliveryMethod",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ItemId"), aname="_ItemId", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ISPUPostalCode"), aname="_ISPUPostalCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MerchantId"), aname="_MerchantId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReviewSort"), aname="_ReviewSort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.SimilarityType_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Condition = None
                    self._DeliveryMethod = None
                    self._ItemId = []
                    self._ISPUPostalCode = None
                    self._MerchantId = None
                    self._ResponseGroup = []
                    self._ReviewSort = None
                    self._SimilarityType = None
                    return
            Holder.__name__ = "SimilarityLookupRequest_Holder"
            self.pyclass = Holder


        class SimilarityType_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "SimilarityType"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SimilarityType")
                kw["aname"] = "_SimilarityType"
                ZSI.TC.String.__init__(self, **kw)




    class SellerLookupRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "SellerLookupRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SellerLookupRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SellerId"), aname="_SellerId", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"FeedbackPage"), aname="_FeedbackPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResponseGroup = []
                    self._SellerId = []
                    self._FeedbackPage = None
                    return
            Holder.__name__ = "SellerLookupRequest_Holder"
            self.pyclass = Holder

    class CartGetRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "CartGetRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CartGetRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"CartId"), aname="_CartId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"HMAC"), aname="_HMAC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MergeCart"), aname="_MergeCart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CartId = None
                    self._HMAC = None
                    self._MergeCart = None
                    self._ResponseGroup = []
                    return
            Holder.__name__ = "CartGetRequest_Holder"
            self.pyclass = Holder

    class CartAddRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "CartAddRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CartAddRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"CartId"), aname="_CartId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"HMAC"), aname="_HMAC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MergeCart"), aname="_MergeCart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Items_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CartId = None
                    self._HMAC = None
                    self._MergeCart = None
                    self._Items = None
                    self._ResponseGroup = []
                    return
            Holder.__name__ = "CartAddRequest_Holder"
            self.pyclass = Holder


        class Items_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Items"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.CartAddRequest_Def.Items_Dec.schema
                TClist = [self.__class__.Item_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Items")
                kw["aname"] = "_Items"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Item = []
                        return
                Holder.__name__ = "Items_Holder"
                self.pyclass = Holder


            class Item_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "Item"
                schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                def __init__(self, **kw):
                    ns = ns0.CartAddRequest_Def.Items_Dec.Item_Dec.schema
                    TClist = [ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"OfferListingId"), aname="_OfferListingId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ListItemId"), aname="_ListItemId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Item")
                    kw["aname"] = "_Item"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._ASIN = None
                            self._OfferListingId = None
                            self._Quantity = None
                            self._AssociateTag = None
                            self._ListItemId = None
                            return
                    Holder.__name__ = "Item_Holder"
                    self.pyclass = Holder







    class CartCreateRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "CartCreateRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CartCreateRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"MergeCart"), aname="_MergeCart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Items_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MergeCart = None
                    self._Items = None
                    self._ResponseGroup = []
                    return
            Holder.__name__ = "CartCreateRequest_Holder"
            self.pyclass = Holder


        class Items_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Items"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.CartCreateRequest_Def.Items_Dec.schema
                TClist = [self.__class__.Item_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Items")
                kw["aname"] = "_Items"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Item = []
                        return
                Holder.__name__ = "Items_Holder"
                self.pyclass = Holder


            class Item_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "Item"
                schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                def __init__(self, **kw):
                    ns = ns0.CartCreateRequest_Def.Items_Dec.Item_Dec.schema
                    TClist = [ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"OfferListingId"), aname="_OfferListingId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ListItemId"), aname="_ListItemId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Item")
                    kw["aname"] = "_Item"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._ASIN = None
                            self._OfferListingId = None
                            self._Quantity = None
                            self._AssociateTag = None
                            self._ListItemId = None
                            return
                    Holder.__name__ = "Item_Holder"
                    self.pyclass = Holder







    class CartModifyRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "CartModifyRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CartModifyRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"CartId"), aname="_CartId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"HMAC"), aname="_HMAC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MergeCart"), aname="_MergeCart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Items_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CartId = None
                    self._HMAC = None
                    self._MergeCart = None
                    self._Items = None
                    self._ResponseGroup = []
                    return
            Holder.__name__ = "CartModifyRequest_Holder"
            self.pyclass = Holder


        class Items_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Items"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.CartModifyRequest_Def.Items_Dec.schema
                TClist = [self.__class__.Item_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Items")
                kw["aname"] = "_Items"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Item = []
                        return
                Holder.__name__ = "Items_Holder"
                self.pyclass = Holder


            class Item_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "Item"
                schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                def __init__(self, **kw):
                    ns = ns0.CartModifyRequest_Def.Items_Dec.Item_Dec.schema
                    TClist = [self.__class__.Action_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CartItemId"), aname="_CartItemId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Item")
                    kw["aname"] = "_Item"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._Action = None
                            self._CartItemId = None
                            self._Quantity = None
                            return
                    Holder.__name__ = "Item_Holder"
                    self.pyclass = Holder


                class Action_Dec(ZSI.TC.String, LocalElementDeclaration):
                    literal = "Action"
                    schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                    def __init__(self, **kw):
                        kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Action")
                        kw["aname"] = "_Action"
                        ZSI.TC.String.__init__(self, **kw)










    class CartClearRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "CartClearRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CartClearRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"CartId"), aname="_CartId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"HMAC"), aname="_HMAC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MergeCart"), aname="_MergeCart", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CartId = None
                    self._HMAC = None
                    self._MergeCart = None
                    self._ResponseGroup = []
                    return
            Holder.__name__ = "CartClearRequest_Holder"
            self.pyclass = Holder

    class TransactionLookupRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "TransactionLookupRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.TransactionLookupRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TransactionId"), aname="_TransactionId", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResponseGroup = []
                    self._TransactionId = []
                    return
            Holder.__name__ = "TransactionLookupRequest_Holder"
            self.pyclass = Holder

    class SellerListingSearchRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "SellerListingSearchRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SellerListingSearchRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Keywords"), aname="_Keywords", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"ListingPage"), aname="_ListingPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.OfferStatus_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SellerId"), aname="_SellerId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Sort"), aname="_Sort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Keywords = None
                    self._ListingPage = None
                    self._OfferStatus = None
                    self._ResponseGroup = []
                    self._SellerId = None
                    self._Sort = None
                    self._Title = None
                    return
            Holder.__name__ = "SellerListingSearchRequest_Holder"
            self.pyclass = Holder


        class OfferStatus_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "OfferStatus"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OfferStatus")
                kw["aname"] = "_OfferStatus"
                ZSI.TC.String.__init__(self, **kw)




    class SellerListingLookupRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "SellerListingLookupRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.SellerListingLookupRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Id"), aname="_Id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SellerId"), aname="_SellerId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.IdType_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Id = None
                    self._SellerId = None
                    self._IdType = None
                    self._ResponseGroup = []
                    return
            Holder.__name__ = "SellerListingLookupRequest_Holder"
            self.pyclass = Holder


        class IdType_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "IdType"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","IdType")
                kw["aname"] = "_IdType"
                ZSI.TC.String.__init__(self, **kw)




    class BrowseNodeLookupRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "BrowseNodeLookupRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.BrowseNodeLookupRequest_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"BrowseNodeId"), aname="_BrowseNodeId", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._BrowseNodeId = []
                    self._ResponseGroup = []
                    return
            Holder.__name__ = "BrowseNodeLookupRequest_Holder"
            self.pyclass = Holder

    class PromotionEligibilityRequirements_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "PromotionEligibilityRequirements")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PromotionEligibilityRequirements_Def.schema
            TClist = [GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","PromotionEligibilityRequirement",lazy=True)(pname=(ns,"EligibilityRequirement"), aname="_EligibilityRequirement", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._EligibilityRequirement = []
                    return
            Holder.__name__ = "PromotionEligibilityRequirements_Holder"
            self.pyclass = Holder

    class PromotionBenefits_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "PromotionBenefits")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PromotionBenefits_Def.schema
            TClist = [GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","PromotionBenefit",lazy=True)(pname=(ns,"Benefit"), aname="_Benefit", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Benefit = []
                    return
            Holder.__name__ = "PromotionBenefits_Holder"
            self.pyclass = Holder

    class PromotionBenefit_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "PromotionBenefit")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PromotionBenefit_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"BenefitType"), aname="_BenefitType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ComponentType"), aname="_ComponentType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"PercentOff"), aname="_PercentOff", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"FixedAmount"), aname="_FixedAmount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"Ceiling"), aname="_Ceiling", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._BenefitType = None
                    self._ComponentType = None
                    self._Quantity = None
                    self._PercentOff = None
                    self._FixedAmount = None
                    self._Ceiling = None
                    return
            Holder.__name__ = "PromotionBenefit_Holder"
            self.pyclass = Holder

    class PromotionEligibilityRequirement_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "PromotionEligibilityRequirement")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PromotionEligibilityRequirement_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"EligibilityRequirementType"), aname="_EligibilityRequirementType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"CurrencyAmount"), aname="_CurrencyAmount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._EligibilityRequirementType = None
                    self._Quantity = None
                    self._CurrencyAmount = None
                    return
            Holder.__name__ = "PromotionEligibilityRequirement_Holder"
            self.pyclass = Holder

    class PromotionItemApplicability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "PromotionItemApplicability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PromotionItemApplicability_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsInBenefitSet"), aname="_IsInBenefitSet", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsInEligibilityRequirementSet"), aname="_IsInEligibilityRequirementSet", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ASIN = None
                    self._IsInBenefitSet = None
                    self._IsInEligibilityRequirementSet = None
                    return
            Holder.__name__ = "PromotionItemApplicability_Holder"
            self.pyclass = Holder

    class CartItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "CartItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.CartItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"CartItemId"), aname="_CartItemId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ExchangeId"), aname="_ExchangeId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MerchantId"), aname="_MerchantId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SellerId"), aname="_SellerId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SellerNickname"), aname="_SellerNickname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProductGroup"), aname="_ProductGroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ListOwner"), aname="_ListOwner", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ListType"), aname="_ListType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"Price"), aname="_Price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"ItemTotal"), aname="_ItemTotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CartItemId = None
                    self._ASIN = None
                    self._ExchangeId = None
                    self._MerchantId = None
                    self._SellerId = None
                    self._SellerNickname = None
                    self._Quantity = None
                    self._Title = None
                    self._ProductGroup = None
                    self._ListOwner = None
                    self._ListType = None
                    self._Price = None
                    self._ItemTotal = None
                    return
            Holder.__name__ = "CartItem_Holder"
            self.pyclass = Holder

    class Address_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "Address")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Address_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Address1"), aname="_Address1", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Address2"), aname="_Address2", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Address3"), aname="_Address3", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"City"), aname="_City", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"State"), aname="_State", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PostalCode"), aname="_PostalCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Country"), aname="_Country", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Name = None
                    self._Address1 = None
                    self._Address2 = None
                    self._Address3 = None
                    self._City = None
                    self._State = None
                    self._PostalCode = None
                    self._Country = None
                    return
            Holder.__name__ = "Address_Holder"
            self.pyclass = Holder

    class Price_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "Price")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Price_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"Amount"), aname="_Amount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CurrencyCode"), aname="_CurrencyCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FormattedPrice"), aname="_FormattedPrice", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Amount = None
                    self._CurrencyCode = None
                    self._FormattedPrice = None
                    return
            Holder.__name__ = "Price_Holder"
            self.pyclass = Holder

    class Image_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "Image")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.Image_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"URL"), aname="_URL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Height"), aname="_Height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Width"), aname="_Width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"IsVerified"), aname="_IsVerified", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._URL = None
                    self._Height = None
                    self._Width = None
                    self._IsVerified = None
                    return
            Holder.__name__ = "Image_Holder"
            self.pyclass = Holder

    class NonNegativeIntegerWithUnits_Def(ZSI.TCnumbers.InonNegativeInteger, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "NonNegativeIntegerWithUnits")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["Units"] = ZSI.TC.String()
            ZSI.TCnumbers.InonNegativeInteger.__init__(self, pname, **kw)
            class Holder(int):
                __metaclass__ = pyclass_type
                typecode = self
            self.pyclass = Holder

    class DecimalWithUnits_Def(ZSI.TC.Decimal, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "DecimalWithUnits")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["Units"] = ZSI.TC.String()
            ZSI.TC.Decimal.__init__(self, pname, **kw)
            class Holder(float):
                __metaclass__ = pyclass_type
                typecode = self
            self.pyclass = Holder

    class StringWithUnits_Def(ZSI.TC.String, TypeDefinition):
        # ComplexType/SimpleContent derivation of built-in type
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "StringWithUnits")
        def __init__(self, pname, **kw):
            if getattr(self, "attribute_typecode_dict", None) is None: self.attribute_typecode_dict = {}
            # attribute handling code
            self.attribute_typecode_dict["Units"] = ZSI.TC.String()
            ZSI.TC.String.__init__(self, pname, **kw)
            class Holder(str):
                __metaclass__ = pyclass_type
                typecode = self
            self.pyclass = Holder

    class positiveIntegerOrAll_Def(ZSI.TC.Union, TypeDefinition):
        memberTypes = None
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        type = (schema, "positiveIntegerOrAll")
        def __init__(self, pname, **kw):
            ZSI.TC.Union.__init__(self, pname, **kw)

    class Bin_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Bin"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Bin_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"BinName"), aname="_BinName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"BinItemCount"), aname="_BinItemCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.BinParameter_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Bin")
            kw["aname"] = "_Bin"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._BinName = None
                    self._BinItemCount = None
                    self._BinParameter = []
                    return
            Holder.__name__ = "Bin_Holder"
            self.pyclass = Holder


        class BinParameter_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "BinParameter"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Bin_Dec.BinParameter_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Value"), aname="_Value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","BinParameter")
                kw["aname"] = "_BinParameter"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Name = None
                        self._Value = None
                        return
                Holder.__name__ = "BinParameter_Holder"
                self.pyclass = Holder




    class SearchBinSet_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SearchBinSet"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SearchBinSet_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Bin",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SearchBinSet")
            kw["aname"] = "_SearchBinSet"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict["NarrowBy"] = ZSI.TC.String()
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Bin = None
                    return
            Holder.__name__ = "SearchBinSet_Holder"
            self.pyclass = Holder

    class SearchBinSets_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SearchBinSets"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SearchBinSets_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SearchBinSet",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SearchBinSets")
            kw["aname"] = "_SearchBinSets"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SearchBinSet = None
                    return
            Holder.__name__ = "SearchBinSets_Holder"
            self.pyclass = Holder

    class Help_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Help"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Help_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","HelpRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","HelpRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Help")
            kw["aname"] = "_Help"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "Help_Holder"
            self.pyclass = Holder

    class ItemSearch_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ItemSearch"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.ItemSearch_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemSearchRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemSearchRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemSearch")
            kw["aname"] = "_ItemSearch"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._XMLEscaping = None
                    self._Validate = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "ItemSearch_Holder"
            self.pyclass = Holder

    class ItemLookup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ItemLookup"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.ItemLookup_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemLookupRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemLookupRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemLookup")
            kw["aname"] = "_ItemLookup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "ItemLookup_Holder"
            self.pyclass = Holder

    class ListSearch_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ListSearch"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.ListSearch_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListSearchRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListSearchRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListSearch")
            kw["aname"] = "_ListSearch"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "ListSearch_Holder"
            self.pyclass = Holder

    class ListLookup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ListLookup"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.ListLookup_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListLookupRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListLookupRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListLookup")
            kw["aname"] = "_ListLookup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "ListLookup_Holder"
            self.pyclass = Holder

    class CustomerContentSearch_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CustomerContentSearch"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CustomerContentSearch_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerContentSearchRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerContentSearchRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerContentSearch")
            kw["aname"] = "_CustomerContentSearch"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "CustomerContentSearch_Holder"
            self.pyclass = Holder

    class CustomerContentLookup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CustomerContentLookup"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CustomerContentLookup_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerContentLookupRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerContentLookupRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerContentLookup")
            kw["aname"] = "_CustomerContentLookup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "CustomerContentLookup_Holder"
            self.pyclass = Holder

    class SimilarityLookup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SimilarityLookup"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SimilarityLookup_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SimilarityLookupRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SimilarityLookupRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SimilarityLookup")
            kw["aname"] = "_SimilarityLookup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "SimilarityLookup_Holder"
            self.pyclass = Holder

    class SellerLookup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SellerLookup"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SellerLookup_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerLookupRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerLookupRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerLookup")
            kw["aname"] = "_SellerLookup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "SellerLookup_Holder"
            self.pyclass = Holder

    class CartGet_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CartGet"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CartGet_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartGetRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartGetRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartGet")
            kw["aname"] = "_CartGet"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "CartGet_Holder"
            self.pyclass = Holder

    class CartAdd_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CartAdd"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CartAdd_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartAddRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartAddRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartAdd")
            kw["aname"] = "_CartAdd"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "CartAdd_Holder"
            self.pyclass = Holder

    class CartCreate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CartCreate"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CartCreate_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartCreateRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartCreateRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartCreate")
            kw["aname"] = "_CartCreate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "CartCreate_Holder"
            self.pyclass = Holder

    class CartModify_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CartModify"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CartModify_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartModifyRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartModifyRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartModify")
            kw["aname"] = "_CartModify"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "CartModify_Holder"
            self.pyclass = Holder

    class CartClear_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CartClear"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CartClear_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartClearRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartClearRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartClear")
            kw["aname"] = "_CartClear"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "CartClear_Holder"
            self.pyclass = Holder

    class TransactionLookup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "TransactionLookup"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.TransactionLookup_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","TransactionLookupRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","TransactionLookupRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","TransactionLookup")
            kw["aname"] = "_TransactionLookup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "TransactionLookup_Holder"
            self.pyclass = Holder

    class SellerListingSearch_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SellerListingSearch"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SellerListingSearch_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListingSearchRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListingSearchRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListingSearch")
            kw["aname"] = "_SellerListingSearch"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "SellerListingSearch_Holder"
            self.pyclass = Holder

    class SellerListingLookup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SellerListingLookup"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SellerListingLookup_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListingLookupRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListingLookupRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListingLookup")
            kw["aname"] = "_SellerListingLookup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "SellerListingLookup_Holder"
            self.pyclass = Holder

    class BrowseNodeLookup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "BrowseNodeLookup"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.BrowseNodeLookup_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MarketplaceDomain"), aname="_MarketplaceDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AWSAccessKeyId"), aname="_AWSAccessKeyId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubscriptionId"), aname="_SubscriptionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssociateTag"), aname="_AssociateTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Validate"), aname="_Validate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"XMLEscaping"), aname="_XMLEscaping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","BrowseNodeLookupRequest",lazy=True)(pname=(ns,"Shared"), aname="_Shared", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","BrowseNodeLookupRequest",lazy=True)(pname=(ns,"Request"), aname="_Request", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","BrowseNodeLookup")
            kw["aname"] = "_BrowseNodeLookup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarketplaceDomain = None
                    self._AWSAccessKeyId = None
                    self._SubscriptionId = None
                    self._AssociateTag = None
                    self._Validate = None
                    self._XMLEscaping = None
                    self._Shared = None
                    self._Request = []
                    return
            Holder.__name__ = "BrowseNodeLookup_Holder"
            self.pyclass = Holder

    class Condition_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "Condition"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Condition")
            kw["aname"] = "_Condition"
            ZSI.TC.String.__init__(self, **kw)

    class DeliveryMethod_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "DeliveryMethod"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DeliveryMethod")
            kw["aname"] = "_DeliveryMethod"
            ZSI.TC.String.__init__(self, **kw)

    class AudienceRating_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "AudienceRating"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","AudienceRating")
            kw["aname"] = "_AudienceRating"
            ZSI.TC.String.__init__(self, **kw)

    class MultiOperation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "MultiOperation"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.MultiOperation_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Help",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemSearch",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemLookup",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListSearch",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListLookup",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerContentSearch",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerContentLookup",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SimilarityLookup",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerLookup",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartGet",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartAdd",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartCreate",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartModify",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartClear",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","TransactionLookup",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListingSearch",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListingLookup",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","BrowseNodeLookup",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","MultiOperation")
            kw["aname"] = "_MultiOperation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Help = None
                    self._ItemSearch = None
                    self._ItemLookup = None
                    self._ListSearch = None
                    self._ListLookup = None
                    self._CustomerContentSearch = None
                    self._CustomerContentLookup = None
                    self._SimilarityLookup = None
                    self._SellerLookup = None
                    self._CartGet = None
                    self._CartAdd = None
                    self._CartCreate = None
                    self._CartModify = None
                    self._CartClear = None
                    self._TransactionLookup = None
                    self._SellerListingSearch = None
                    self._SellerListingLookup = None
                    self._BrowseNodeLookup = None
                    return
            Holder.__name__ = "MultiOperation_Holder"
            self.pyclass = Holder

    class HelpResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "HelpResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.HelpResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Information",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","HelpResponse")
            kw["aname"] = "_HelpResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._Information = None
                    return
            Holder.__name__ = "HelpResponse_Holder"
            self.pyclass = Holder

    class ItemSearchResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ItemSearchResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.ItemSearchResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Items",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemSearchResponse")
            kw["aname"] = "_ItemSearchResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._Items = None
                    return
            Holder.__name__ = "ItemSearchResponse_Holder"
            self.pyclass = Holder

    class ItemLookupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ItemLookupResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.ItemLookupResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Items",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemLookupResponse")
            kw["aname"] = "_ItemLookupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._Items = None
                    return
            Holder.__name__ = "ItemLookupResponse_Holder"
            self.pyclass = Holder

    class ListSearchResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ListSearchResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.ListSearchResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Lists",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListSearchResponse")
            kw["aname"] = "_ListSearchResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._Lists = None
                    return
            Holder.__name__ = "ListSearchResponse_Holder"
            self.pyclass = Holder

    class ListLookupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ListLookupResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.ListLookupResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Lists",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListLookupResponse")
            kw["aname"] = "_ListLookupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._Lists = None
                    return
            Holder.__name__ = "ListLookupResponse_Holder"
            self.pyclass = Holder

    class CustomerContentSearchResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CustomerContentSearchResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CustomerContentSearchResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Customers",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerContentSearchResponse")
            kw["aname"] = "_CustomerContentSearchResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._Customers = None
                    return
            Holder.__name__ = "CustomerContentSearchResponse_Holder"
            self.pyclass = Holder

    class CustomerContentLookupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CustomerContentLookupResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CustomerContentLookupResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Customers",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerContentLookupResponse")
            kw["aname"] = "_CustomerContentLookupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._Customers = None
                    return
            Holder.__name__ = "CustomerContentLookupResponse_Holder"
            self.pyclass = Holder

    class SimilarityLookupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SimilarityLookupResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SimilarityLookupResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Items",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SimilarityLookupResponse")
            kw["aname"] = "_SimilarityLookupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._Items = None
                    return
            Holder.__name__ = "SimilarityLookupResponse_Holder"
            self.pyclass = Holder

    class SellerLookupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SellerLookupResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SellerLookupResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Sellers",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerLookupResponse")
            kw["aname"] = "_SellerLookupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._Sellers = None
                    return
            Holder.__name__ = "SellerLookupResponse_Holder"
            self.pyclass = Holder

    class CartGetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CartGetResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CartGetResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Cart",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartGetResponse")
            kw["aname"] = "_CartGetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._Cart = None
                    return
            Holder.__name__ = "CartGetResponse_Holder"
            self.pyclass = Holder

    class CartAddResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CartAddResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CartAddResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Cart",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartAddResponse")
            kw["aname"] = "_CartAddResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._Cart = None
                    return
            Holder.__name__ = "CartAddResponse_Holder"
            self.pyclass = Holder

    class CartCreateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CartCreateResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CartCreateResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Cart",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartCreateResponse")
            kw["aname"] = "_CartCreateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._Cart = None
                    return
            Holder.__name__ = "CartCreateResponse_Holder"
            self.pyclass = Holder

    class CartModifyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CartModifyResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CartModifyResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Cart",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartModifyResponse")
            kw["aname"] = "_CartModifyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._Cart = None
                    return
            Holder.__name__ = "CartModifyResponse_Holder"
            self.pyclass = Holder

    class CartClearResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CartClearResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CartClearResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Cart",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartClearResponse")
            kw["aname"] = "_CartClearResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._Cart = None
                    return
            Holder.__name__ = "CartClearResponse_Holder"
            self.pyclass = Holder

    class TransactionLookupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "TransactionLookupResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.TransactionLookupResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Transactions",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","TransactionLookupResponse")
            kw["aname"] = "_TransactionLookupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._Transactions = None
                    return
            Holder.__name__ = "TransactionLookupResponse_Holder"
            self.pyclass = Holder

    class SellerListingSearchResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SellerListingSearchResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SellerListingSearchResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListings",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListingSearchResponse")
            kw["aname"] = "_SellerListingSearchResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._SellerListings = None
                    return
            Holder.__name__ = "SellerListingSearchResponse_Holder"
            self.pyclass = Holder

    class SellerListingLookupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SellerListingLookupResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SellerListingLookupResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListings",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListingLookupResponse")
            kw["aname"] = "_SellerListingLookupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._SellerListings = None
                    return
            Holder.__name__ = "SellerListingLookupResponse_Holder"
            self.pyclass = Holder

    class BrowseNodeLookupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "BrowseNodeLookupResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.BrowseNodeLookupResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","BrowseNodes",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","BrowseNodeLookupResponse")
            kw["aname"] = "_BrowseNodeLookupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._BrowseNodes = None
                    return
            Holder.__name__ = "BrowseNodeLookupResponse_Holder"
            self.pyclass = Holder

    class MultiOperationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "MultiOperationResponse"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.MultiOperationResponse_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","HelpResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemSearchResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemLookupResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListSearchResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListLookupResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerContentSearchResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerContentLookupResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SimilarityLookupResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerLookupResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartGetResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartAddResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartCreateResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartModifyResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartClearResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","TransactionLookupResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListingSearchResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListingLookupResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","BrowseNodeLookupResponse",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","MultiOperationResponse")
            kw["aname"] = "_MultiOperationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OperationRequest = None
                    self._HelpResponse = None
                    self._ItemSearchResponse = None
                    self._ItemLookupResponse = None
                    self._ListSearchResponse = None
                    self._ListLookupResponse = None
                    self._CustomerContentSearchResponse = None
                    self._CustomerContentLookupResponse = None
                    self._SimilarityLookupResponse = None
                    self._SellerLookupResponse = None
                    self._CartGetResponse = None
                    self._CartAddResponse = None
                    self._CartCreateResponse = None
                    self._CartModifyResponse = None
                    self._CartClearResponse = None
                    self._TransactionLookupResponse = None
                    self._SellerListingSearchResponse = None
                    self._SellerListingLookupResponse = None
                    self._BrowseNodeLookupResponse = None
                    return
            Holder.__name__ = "MultiOperationResponse_Holder"
            self.pyclass = Holder

    class OperationRequest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "OperationRequest"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.OperationRequest_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","HTTPHeaders",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RequestId"), aname="_RequestId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Arguments",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Errors",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname=(ns,"RequestProcessingTime"), aname="_RequestProcessingTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationRequest")
            kw["aname"] = "_OperationRequest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._HTTPHeaders = None
                    self._RequestId = None
                    self._Arguments = None
                    self._Errors = None
                    self._RequestProcessingTime = None
                    return
            Holder.__name__ = "OperationRequest_Holder"
            self.pyclass = Holder

    class Request_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Request"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Request_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"IsValid"), aname="_IsValid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","HelpRequest",lazy=True)(pname=(ns,"HelpRequest"), aname="_HelpRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","BrowseNodeLookupRequest",lazy=True)(pname=(ns,"BrowseNodeLookupRequest"), aname="_BrowseNodeLookupRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemSearchRequest",lazy=True)(pname=(ns,"ItemSearchRequest"), aname="_ItemSearchRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemLookupRequest",lazy=True)(pname=(ns,"ItemLookupRequest"), aname="_ItemLookupRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListSearchRequest",lazy=True)(pname=(ns,"ListSearchRequest"), aname="_ListSearchRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListLookupRequest",lazy=True)(pname=(ns,"ListLookupRequest"), aname="_ListLookupRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerContentSearchRequest",lazy=True)(pname=(ns,"CustomerContentSearchRequest"), aname="_CustomerContentSearchRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerContentLookupRequest",lazy=True)(pname=(ns,"CustomerContentLookupRequest"), aname="_CustomerContentLookupRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SimilarityLookupRequest",lazy=True)(pname=(ns,"SimilarityLookupRequest"), aname="_SimilarityLookupRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartGetRequest",lazy=True)(pname=(ns,"CartGetRequest"), aname="_CartGetRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartAddRequest",lazy=True)(pname=(ns,"CartAddRequest"), aname="_CartAddRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartCreateRequest",lazy=True)(pname=(ns,"CartCreateRequest"), aname="_CartCreateRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartModifyRequest",lazy=True)(pname=(ns,"CartModifyRequest"), aname="_CartModifyRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartClearRequest",lazy=True)(pname=(ns,"CartClearRequest"), aname="_CartClearRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","TransactionLookupRequest",lazy=True)(pname=(ns,"TransactionLookupRequest"), aname="_TransactionLookupRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListingSearchRequest",lazy=True)(pname=(ns,"SellerListingSearchRequest"), aname="_SellerListingSearchRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListingLookupRequest",lazy=True)(pname=(ns,"SellerListingLookupRequest"), aname="_SellerListingLookupRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerLookupRequest",lazy=True)(pname=(ns,"SellerLookupRequest"), aname="_SellerLookupRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Errors",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Request")
            kw["aname"] = "_Request"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._IsValid = None
                    self._HelpRequest = None
                    self._BrowseNodeLookupRequest = None
                    self._ItemSearchRequest = None
                    self._ItemLookupRequest = None
                    self._ListSearchRequest = None
                    self._ListLookupRequest = None
                    self._CustomerContentSearchRequest = None
                    self._CustomerContentLookupRequest = None
                    self._SimilarityLookupRequest = None
                    self._CartGetRequest = None
                    self._CartAddRequest = None
                    self._CartCreateRequest = None
                    self._CartModifyRequest = None
                    self._CartClearRequest = None
                    self._TransactionLookupRequest = None
                    self._SellerListingSearchRequest = None
                    self._SellerListingLookupRequest = None
                    self._SellerLookupRequest = None
                    self._Errors = None
                    return
            Holder.__name__ = "Request_Holder"
            self.pyclass = Holder

    class Arguments_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Arguments"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Arguments_Dec.schema
            TClist = [self.__class__.Argument_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Arguments")
            kw["aname"] = "_Arguments"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Argument = []
                    return
            Holder.__name__ = "Arguments_Holder"
            self.pyclass = Holder


        class Argument_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Argument"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Arguments_Dec.Argument_Dec.schema
                TClist = []
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Argument")
                kw["aname"] = "_Argument"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                # attribute handling code
                self.attribute_typecode_dict["Name"] = ZSI.TC.String()
                self.attribute_typecode_dict["Value"] = ZSI.TC.String()
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        return
                Holder.__name__ = "Argument_Holder"
                self.pyclass = Holder




    class HTTPHeaders_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "HTTPHeaders"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.HTTPHeaders_Dec.schema
            TClist = [self.__class__.Header_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","HTTPHeaders")
            kw["aname"] = "_HTTPHeaders"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Header = []
                    return
            Holder.__name__ = "HTTPHeaders_Holder"
            self.pyclass = Holder


        class Header_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Header"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.HTTPHeaders_Dec.Header_Dec.schema
                TClist = []
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Header")
                kw["aname"] = "_Header"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                # attribute handling code
                self.attribute_typecode_dict["Name"] = ZSI.TC.String()
                self.attribute_typecode_dict["Value"] = ZSI.TC.String()
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        return
                Holder.__name__ = "Header_Holder"
                self.pyclass = Holder




    class Errors_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Errors"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Errors_Dec.schema
            TClist = [self.__class__.Error_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Errors")
            kw["aname"] = "_Errors"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Error = []
                    return
            Holder.__name__ = "Errors_Holder"
            self.pyclass = Holder


        class Error_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Error"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Errors_Dec.Error_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"Code"), aname="_Code", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Message"), aname="_Message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Error")
                kw["aname"] = "_Error"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Code = None
                        self._Message = None
                        return
                Holder.__name__ = "Error_Holder"
                self.pyclass = Holder




    class Information_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Information"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Information_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Request",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationInformation",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ResponseGroupInformation",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Information")
            kw["aname"] = "_Information"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Request = None
                    self._OperationInformation = None
                    self._ResponseGroupInformation = None
                    return
            Holder.__name__ = "Information_Holder"
            self.pyclass = Holder

    class Items_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Items"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Items_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Request",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CorrectedQuery",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalResults"), aname="_TotalResults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalPages"), aname="_TotalPages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SearchResultsMap",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Item",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SearchBinSets",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Items")
            kw["aname"] = "_Items"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Request = None
                    self._CorrectedQuery = None
                    self._TotalResults = None
                    self._TotalPages = None
                    self._SearchResultsMap = None
                    self._Item = None
                    self._SearchBinSets = None
                    return
            Holder.__name__ = "Items_Holder"
            self.pyclass = Holder

    class CorrectedQuery_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CorrectedQuery"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CorrectedQuery_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Keywords"), aname="_Keywords", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Message"), aname="_Message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CorrectedQuery")
            kw["aname"] = "_CorrectedQuery"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Keywords = None
                    self._Message = None
                    return
            Holder.__name__ = "CorrectedQuery_Holder"
            self.pyclass = Holder

    class Lists_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Lists"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Lists_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Request",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalResults"), aname="_TotalResults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalPages"), aname="_TotalPages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","List",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Lists")
            kw["aname"] = "_Lists"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Request = None
                    self._TotalResults = None
                    self._TotalPages = None
                    self._List = None
                    return
            Holder.__name__ = "Lists_Holder"
            self.pyclass = Holder

    class Customers_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Customers"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Customers_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Request",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalResults"), aname="_TotalResults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalPages"), aname="_TotalPages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Customer",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Customers")
            kw["aname"] = "_Customers"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Request = None
                    self._TotalResults = None
                    self._TotalPages = None
                    self._Customer = None
                    return
            Holder.__name__ = "Customers_Holder"
            self.pyclass = Holder

    class Cart_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Cart"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Cart_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Request",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CartId"), aname="_CartId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"HMAC"), aname="_HMAC", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"URLEncodedHMAC"), aname="_URLEncodedHMAC", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PurchaseURL"), aname="_PurchaseURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"SubTotal"), aname="_SubTotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartItems",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SavedForLaterItems",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SimilarProducts",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","TopSellers",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NewReleases",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SimilarViewedProducts",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OtherCategoriesSimilarProducts",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Cart")
            kw["aname"] = "_Cart"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Request = None
                    self._CartId = None
                    self._HMAC = None
                    self._URLEncodedHMAC = None
                    self._PurchaseURL = None
                    self._SubTotal = None
                    self._CartItems = None
                    self._SavedForLaterItems = None
                    self._SimilarProducts = None
                    self._TopSellers = None
                    self._NewReleases = None
                    self._SimilarViewedProducts = None
                    self._OtherCategoriesSimilarProducts = None
                    return
            Holder.__name__ = "Cart_Holder"
            self.pyclass = Holder

    class Transactions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Transactions"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Transactions_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Request",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalResults"), aname="_TotalResults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalPages"), aname="_TotalPages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Transaction",lazy=True, isref=True)(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Transactions")
            kw["aname"] = "_Transactions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Request = None
                    self._TotalResults = None
                    self._TotalPages = None
                    self._Transaction = None
                    return
            Holder.__name__ = "Transactions_Holder"
            self.pyclass = Holder

    class Sellers_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Sellers"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Sellers_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Request",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalResults"), aname="_TotalResults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalPages"), aname="_TotalPages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Seller",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Sellers")
            kw["aname"] = "_Sellers"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Request = None
                    self._TotalResults = None
                    self._TotalPages = None
                    self._Seller = None
                    return
            Holder.__name__ = "Sellers_Holder"
            self.pyclass = Holder

    class SellerListings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SellerListings"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SellerListings_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Request",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalResults"), aname="_TotalResults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalPages"), aname="_TotalPages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListing",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListings")
            kw["aname"] = "_SellerListings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Request = None
                    self._TotalResults = None
                    self._TotalPages = None
                    self._SellerListing = None
                    return
            Holder.__name__ = "SellerListings_Holder"
            self.pyclass = Holder

    class OperationInformation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "OperationInformation"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.OperationInformation_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Description"), aname="_Description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.RequiredParameters_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.AvailableParameters_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.DefaultResponseGroups_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.AvailableResponseGroups_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OperationInformation")
            kw["aname"] = "_OperationInformation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Name = None
                    self._Description = None
                    self._RequiredParameters = None
                    self._AvailableParameters = None
                    self._DefaultResponseGroups = None
                    self._AvailableResponseGroups = None
                    return
            Holder.__name__ = "OperationInformation_Holder"
            self.pyclass = Holder


        class RequiredParameters_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "RequiredParameters"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.OperationInformation_Dec.RequiredParameters_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"Parameter"), aname="_Parameter", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","RequiredParameters")
                kw["aname"] = "_RequiredParameters"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Parameter = []
                        return
                Holder.__name__ = "RequiredParameters_Holder"
                self.pyclass = Holder





        class AvailableParameters_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "AvailableParameters"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.OperationInformation_Dec.AvailableParameters_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"Parameter"), aname="_Parameter", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","AvailableParameters")
                kw["aname"] = "_AvailableParameters"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Parameter = []
                        return
                Holder.__name__ = "AvailableParameters_Holder"
                self.pyclass = Holder





        class DefaultResponseGroups_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "DefaultResponseGroups"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.OperationInformation_Dec.DefaultResponseGroups_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DefaultResponseGroups")
                kw["aname"] = "_DefaultResponseGroups"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ResponseGroup = []
                        return
                Holder.__name__ = "DefaultResponseGroups_Holder"
                self.pyclass = Holder





        class AvailableResponseGroups_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "AvailableResponseGroups"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.OperationInformation_Dec.AvailableResponseGroups_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"ResponseGroup"), aname="_ResponseGroup", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","AvailableResponseGroups")
                kw["aname"] = "_AvailableResponseGroups"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ResponseGroup = []
                        return
                Holder.__name__ = "AvailableResponseGroups_Holder"
                self.pyclass = Holder




    class ResponseGroupInformation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ResponseGroupInformation"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.ResponseGroupInformation_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CreationDate"), aname="_CreationDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.ValidOperations_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.Elements_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ResponseGroupInformation")
            kw["aname"] = "_ResponseGroupInformation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Name = None
                    self._CreationDate = None
                    self._ValidOperations = None
                    self._Elements = None
                    return
            Holder.__name__ = "ResponseGroupInformation_Holder"
            self.pyclass = Holder


        class ValidOperations_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "ValidOperations"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.ResponseGroupInformation_Dec.ValidOperations_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"Operation"), aname="_Operation", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ValidOperations")
                kw["aname"] = "_ValidOperations"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Operation = []
                        return
                Holder.__name__ = "ValidOperations_Holder"
                self.pyclass = Holder





        class Elements_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Elements"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.ResponseGroupInformation_Dec.Elements_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"Element"), aname="_Element", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Elements")
                kw["aname"] = "_Elements"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Element = []
                        return
                Holder.__name__ = "Elements_Holder"
                self.pyclass = Holder




    class List_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "List"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.List_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"ListId"), aname="_ListId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ListURL"), aname="_ListURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RegistryNumber"), aname="_RegistryNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ListName"), aname="_ListName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.ListType_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalItems"), aname="_TotalItems", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalPages"), aname="_TotalPages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DateCreated"), aname="_DateCreated", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"OccasionDate"), aname="_OccasionDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CustomerName"), aname="_CustomerName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PartnerName"), aname="_PartnerName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AdditionalName"), aname="_AdditionalName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Comment"), aname="_Comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Image",lazy=True)(pname=(ns,"Image"), aname="_Image", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"AverageRating"), aname="_AverageRating", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalVotes"), aname="_TotalVotes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalTimesRead"), aname="_TotalTimesRead", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListItem",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","List")
            kw["aname"] = "_List"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ListId = None
                    self._ListURL = None
                    self._RegistryNumber = None
                    self._ListName = None
                    self._ListType = None
                    self._TotalItems = None
                    self._TotalPages = None
                    self._DateCreated = None
                    self._OccasionDate = None
                    self._CustomerName = None
                    self._PartnerName = None
                    self._AdditionalName = None
                    self._Comment = None
                    self._Image = None
                    self._AverageRating = None
                    self._TotalVotes = None
                    self._TotalTimesRead = None
                    self._ListItem = None
                    return
            Holder.__name__ = "List_Holder"
            self.pyclass = Holder


        class ListType_Dec(ZSI.TC.String, LocalElementDeclaration):
            literal = "ListType"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListType")
                kw["aname"] = "_ListType"
                ZSI.TC.String.__init__(self, **kw)




    class ListItem_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ListItem"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.ListItem_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"ListItemId"), aname="_ListItemId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DateAdded"), aname="_DateAdded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Comment"), aname="_Comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"QuantityDesired"), aname="_QuantityDesired", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"QuantityReceived"), aname="_QuantityReceived", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Item",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListItem")
            kw["aname"] = "_ListItem"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ListItemId = None
                    self._DateAdded = None
                    self._Comment = None
                    self._QuantityDesired = None
                    self._QuantityReceived = None
                    self._Item = None
                    return
            Holder.__name__ = "ListItem_Holder"
            self.pyclass = Holder

    class Customer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Customer"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Customer_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"CustomerId"), aname="_CustomerId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Nickname"), aname="_Nickname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Birthday"), aname="_Birthday", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"WishListId"), aname="_WishListId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Location_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerReviews",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Customer")
            kw["aname"] = "_Customer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CustomerId = None
                    self._Nickname = None
                    self._Birthday = None
                    self._WishListId = None
                    self._Location = None
                    self._CustomerReviews = None
                    return
            Holder.__name__ = "Customer_Holder"
            self.pyclass = Holder


        class Location_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Location"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Customer_Dec.Location_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"UserDefinedLocation"), aname="_UserDefinedLocation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"City"), aname="_City", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"State"), aname="_State", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Country"), aname="_Country", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Location")
                kw["aname"] = "_Location"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._UserDefinedLocation = None
                        self._City = None
                        self._State = None
                        self._Country = None
                        return
                Holder.__name__ = "Location_Holder"
                self.pyclass = Holder




    class SearchResultsMap_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SearchResultsMap"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SearchResultsMap_Dec.schema
            TClist = [self.__class__.SearchIndex_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SearchResultsMap")
            kw["aname"] = "_SearchResultsMap"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SearchIndex = []
                    return
            Holder.__name__ = "SearchResultsMap_Holder"
            self.pyclass = Holder


        class SearchIndex_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "SearchIndex"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.SearchResultsMap_Dec.SearchIndex_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"IndexName"), aname="_IndexName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"Results"), aname="_Results", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"Pages"), aname="_Pages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CorrectedQuery",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"RelevanceRank"), aname="_RelevanceRank", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SearchIndex")
                kw["aname"] = "_SearchIndex"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._IndexName = None
                        self._Results = None
                        self._Pages = None
                        self._CorrectedQuery = None
                        self._RelevanceRank = None
                        self._ASIN = []
                        return
                Holder.__name__ = "SearchIndex_Holder"
                self.pyclass = Holder




    class Item_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Item"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Item_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ParentASIN"), aname="_ParentASIN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Errors",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DetailPageURL"), aname="_DetailPageURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SalesRank"), aname="_SalesRank", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Image",lazy=True)(pname=(ns,"SmallImage"), aname="_SmallImage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Image",lazy=True)(pname=(ns,"MediumImage"), aname="_MediumImage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Image",lazy=True)(pname=(ns,"LargeImage"), aname="_LargeImage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.ImageSets_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemAttributes",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","MerchantItemAttributes",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Collections",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.Subjects_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OfferSummary",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Offers",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","VariationSummary",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Variations",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerReviews",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","EditorialReviews",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SimilarProducts",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Accessories",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Tracks",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","BrowseNodes",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListmaniaLists",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SearchInside",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.AlternateVersions_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Item")
            kw["aname"] = "_Item"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ASIN = None
                    self._ParentASIN = None
                    self._Errors = None
                    self._DetailPageURL = None
                    self._SalesRank = None
                    self._SmallImage = None
                    self._MediumImage = None
                    self._LargeImage = None
                    self._ImageSets = []
                    self._ItemAttributes = None
                    self._MerchantItemAttributes = None
                    self._Collections = None
                    self._Subjects = None
                    self._OfferSummary = None
                    self._Offers = None
                    self._VariationSummary = None
                    self._Variations = None
                    self._CustomerReviews = None
                    self._EditorialReviews = None
                    self._SimilarProducts = None
                    self._Accessories = None
                    self._Tracks = None
                    self._BrowseNodes = None
                    self._ListmaniaLists = None
                    self._SearchInside = None
                    self._AlternateVersions = None
                    return
            Holder.__name__ = "Item_Holder"
            self.pyclass = Holder


        class ImageSets_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "ImageSets"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Item_Dec.ImageSets_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"MerchantId"), aname="_MerchantId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ImageSet",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ImageSets")
                kw["aname"] = "_ImageSets"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._MerchantId = None
                        self._ImageSet = None
                        return
                Holder.__name__ = "ImageSets_Holder"
                self.pyclass = Holder





        class Subjects_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Subjects"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Item_Dec.Subjects_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"Subject"), aname="_Subject", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Subjects")
                kw["aname"] = "_Subjects"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Subject = []
                        return
                Holder.__name__ = "Subjects_Holder"
                self.pyclass = Holder





        class AlternateVersions_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "AlternateVersions"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Item_Dec.AlternateVersions_Dec.schema
                TClist = [self.__class__.AlternateVersion_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","AlternateVersions")
                kw["aname"] = "_AlternateVersions"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._AlternateVersion = []
                        return
                Holder.__name__ = "AlternateVersions_Holder"
                self.pyclass = Holder


            class AlternateVersion_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "AlternateVersion"
                schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                def __init__(self, **kw):
                    ns = ns0.Item_Dec.AlternateVersions_Dec.AlternateVersion_Dec.schema
                    TClist = [ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Binding"), aname="_Binding", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","AlternateVersion")
                    kw["aname"] = "_AlternateVersion"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._ASIN = None
                            self._Title = None
                            self._Binding = None
                            return
                    Holder.__name__ = "AlternateVersion_Holder"
                    self.pyclass = Holder







    class OfferSummary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "OfferSummary"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.OfferSummary_Dec.schema
            TClist = [GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"LowestNewPrice"), aname="_LowestNewPrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"LowestUsedPrice"), aname="_LowestUsedPrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"LowestCollectiblePrice"), aname="_LowestCollectiblePrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"LowestRefurbishedPrice"), aname="_LowestRefurbishedPrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TotalNew"), aname="_TotalNew", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TotalUsed"), aname="_TotalUsed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TotalCollectible"), aname="_TotalCollectible", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TotalRefurbished"), aname="_TotalRefurbished", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OfferSummary")
            kw["aname"] = "_OfferSummary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LowestNewPrice = None
                    self._LowestUsedPrice = None
                    self._LowestCollectiblePrice = None
                    self._LowestRefurbishedPrice = None
                    self._TotalNew = None
                    self._TotalUsed = None
                    self._TotalCollectible = None
                    self._TotalRefurbished = None
                    return
            Holder.__name__ = "OfferSummary_Holder"
            self.pyclass = Holder

    class Offers_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Offers"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Offers_Dec.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalOffers"), aname="_TotalOffers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalOfferPages"), aname="_TotalOfferPages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Offer",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Offers")
            kw["aname"] = "_Offers"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TotalOffers = None
                    self._TotalOfferPages = None
                    self._Offer = None
                    return
            Holder.__name__ = "Offers_Holder"
            self.pyclass = Holder

    class Offer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Offer"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Offer_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Merchant",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Seller",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OfferAttributes",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OfferListing",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","LoyaltyPoints",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Promotions",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Offer")
            kw["aname"] = "_Offer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Merchant = None
                    self._Seller = None
                    self._OfferAttributes = None
                    self._OfferListing = None
                    self._LoyaltyPoints = None
                    self._Promotions = None
                    return
            Holder.__name__ = "Offer_Holder"
            self.pyclass = Holder

    class OfferAttributes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "OfferAttributes"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.OfferAttributes_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Condition"), aname="_Condition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubCondition"), aname="_SubCondition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ConditionNote"), aname="_ConditionNote", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"WillShipExpedited"), aname="_WillShipExpedited", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"WillShipInternational"), aname="_WillShipInternational", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OfferAttributes")
            kw["aname"] = "_OfferAttributes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Condition = None
                    self._SubCondition = None
                    self._ConditionNote = None
                    self._WillShipExpedited = None
                    self._WillShipInternational = None
                    return
            Holder.__name__ = "OfferAttributes_Holder"
            self.pyclass = Holder

    class Merchant_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Merchant"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Merchant_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"MerchantId"), aname="_MerchantId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GlancePage"), aname="_GlancePage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"AverageFeedbackRating"), aname="_AverageFeedbackRating", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalFeedback"), aname="_TotalFeedback", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalFeedbackPages"), aname="_TotalFeedbackPages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Merchant")
            kw["aname"] = "_Merchant"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MerchantId = None
                    self._Name = None
                    self._GlancePage = None
                    self._AverageFeedbackRating = None
                    self._TotalFeedback = None
                    self._TotalFeedbackPages = None
                    return
            Holder.__name__ = "Merchant_Holder"
            self.pyclass = Holder

    class OfferListing_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "OfferListing"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.OfferListing_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"OfferListingId"), aname="_OfferListingId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ExchangeId"), aname="_ExchangeId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"Price"), aname="_Price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"SalePrice"), aname="_SalePrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"AmountSaved"), aname="_AmountSaved", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"PercentageSaved"), aname="_PercentageSaved", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Availability"), aname="_Availability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.AvailabilityAttributes_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Address",lazy=True)(pname=(ns,"ISPUStoreAddress"), aname="_ISPUStoreAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ISPUStoreHours"), aname="_ISPUStoreHours", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsEligibleForSuperSaverShipping"), aname="_IsEligibleForSuperSaverShipping", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SalesRestriction"), aname="_SalesRestriction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.ShippingCharge_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OfferListing")
            kw["aname"] = "_OfferListing"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OfferListingId = None
                    self._ExchangeId = None
                    self._Price = None
                    self._SalePrice = None
                    self._AmountSaved = None
                    self._PercentageSaved = None
                    self._Availability = None
                    self._AvailabilityAttributes = None
                    self._Quantity = None
                    self._ISPUStoreAddress = None
                    self._ISPUStoreHours = None
                    self._IsEligibleForSuperSaverShipping = None
                    self._SalesRestriction = None
                    self._ShippingCharge = []
                    return
            Holder.__name__ = "OfferListing_Holder"
            self.pyclass = Holder


        class AvailabilityAttributes_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "AvailabilityAttributes"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.OfferListing_Dec.AvailabilityAttributes_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"AvailabilityType"), aname="_AvailabilityType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsPreorder"), aname="_IsPreorder", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"MinimumHours"), aname="_MinimumHours", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"MaximumHours"), aname="_MaximumHours", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","AvailabilityAttributes")
                kw["aname"] = "_AvailabilityAttributes"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._AvailabilityType = None
                        self._IsPreorder = None
                        self._MinimumHours = None
                        self._MaximumHours = None
                        return
                Holder.__name__ = "AvailabilityAttributes_Holder"
                self.pyclass = Holder





        class ShippingCharge_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "ShippingCharge"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.OfferListing_Dec.ShippingCharge_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"ShippingType"), aname="_ShippingType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"ShippingPrice"), aname="_ShippingPrice", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ShippingCharge")
                kw["aname"] = "_ShippingCharge"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ShippingType = None
                        self._ShippingPrice = None
                        return
                Holder.__name__ = "ShippingCharge_Holder"
                self.pyclass = Holder




    class LoyaltyPoints_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "LoyaltyPoints"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.LoyaltyPoints_Dec.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"Points"), aname="_Points", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"TypicalRedemptionValue"), aname="_TypicalRedemptionValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","LoyaltyPoints")
            kw["aname"] = "_LoyaltyPoints"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Points = None
                    self._TypicalRedemptionValue = None
                    return
            Holder.__name__ = "LoyaltyPoints_Holder"
            self.pyclass = Holder

    class VariationSummary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "VariationSummary"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.VariationSummary_Dec.schema
            TClist = [GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"LowestPrice"), aname="_LowestPrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"HighestPrice"), aname="_HighestPrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"LowestSalePrice"), aname="_LowestSalePrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"HighestSalePrice"), aname="_HighestSalePrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SingleMerchantId"), aname="_SingleMerchantId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","VariationSummary")
            kw["aname"] = "_VariationSummary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._LowestPrice = None
                    self._HighestPrice = None
                    self._LowestSalePrice = None
                    self._HighestSalePrice = None
                    self._SingleMerchantId = None
                    return
            Holder.__name__ = "VariationSummary_Holder"
            self.pyclass = Holder

    class Variations_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Variations"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Variations_Dec.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalVariations"), aname="_TotalVariations", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalVariationPages"), aname="_TotalVariationPages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","VariationDimensions",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Item",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Variations")
            kw["aname"] = "_Variations"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TotalVariations = None
                    self._TotalVariationPages = None
                    self._VariationDimensions = None
                    self._Item = None
                    return
            Holder.__name__ = "Variations_Holder"
            self.pyclass = Holder

    class VariationDimensions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "VariationDimensions"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.VariationDimensions_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"VariationDimension"), aname="_VariationDimension", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","VariationDimensions")
            kw["aname"] = "_VariationDimensions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._VariationDimension = []
                    return
            Holder.__name__ = "VariationDimensions_Holder"
            self.pyclass = Holder

    class EditorialReviews_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "EditorialReviews"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.EditorialReviews_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","EditorialReview",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","EditorialReviews")
            kw["aname"] = "_EditorialReviews"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._EditorialReview = None
                    return
            Holder.__name__ = "EditorialReviews_Holder"
            self.pyclass = Holder

    class Collections_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Collections"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Collections_Dec.schema
            TClist = [self.__class__.Collection_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Collections")
            kw["aname"] = "_Collections"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Collection = []
                    return
            Holder.__name__ = "Collections_Holder"
            self.pyclass = Holder


        class Collection_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Collection"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Collections_Dec.Collection_Dec.schema
                TClist = [self.__class__.CollectionSummary_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.CollectionParent_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.CollectionItem_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Collection")
                kw["aname"] = "_Collection"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._CollectionSummary = None
                        self._CollectionParent = None
                        self._CollectionItem = []
                        return
                Holder.__name__ = "Collection_Holder"
                self.pyclass = Holder


            class CollectionSummary_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "CollectionSummary"
                schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                def __init__(self, **kw):
                    ns = ns0.Collections_Dec.Collection_Dec.CollectionSummary_Dec.schema
                    TClist = [GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"LowestListPrice"), aname="_LowestListPrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"HighestListPrice"), aname="_HighestListPrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"LowestSalePrice"), aname="_LowestSalePrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"HighestSalePrice"), aname="_HighestSalePrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CollectionSummary")
                    kw["aname"] = "_CollectionSummary"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._LowestListPrice = None
                            self._HighestListPrice = None
                            self._LowestSalePrice = None
                            self._HighestSalePrice = None
                            return
                    Holder.__name__ = "CollectionSummary_Holder"
                    self.pyclass = Holder





            class CollectionParent_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "CollectionParent"
                schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                def __init__(self, **kw):
                    ns = ns0.Collections_Dec.Collection_Dec.CollectionParent_Dec.schema
                    TClist = [ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CollectionParent")
                    kw["aname"] = "_CollectionParent"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._ASIN = None
                            self._Title = None
                            return
                    Holder.__name__ = "CollectionParent_Holder"
                    self.pyclass = Holder





            class CollectionItem_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "CollectionItem"
                schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                def __init__(self, **kw):
                    ns = ns0.Collections_Dec.Collection_Dec.CollectionItem_Dec.schema
                    TClist = [ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CollectionItem")
                    kw["aname"] = "_CollectionItem"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._ASIN = None
                            self._Title = None
                            return
                    Holder.__name__ = "CollectionItem_Holder"
                    self.pyclass = Holder







    class EditorialReview_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "EditorialReview"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.EditorialReview_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Source"), aname="_Source", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Content"), aname="_Content", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","EditorialReview")
            kw["aname"] = "_EditorialReview"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Source = None
                    self._Content = None
                    return
            Holder.__name__ = "EditorialReview_Holder"
            self.pyclass = Holder

    class CustomerReviews_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CustomerReviews"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CustomerReviews_Dec.schema
            TClist = [ZSI.TC.Decimal(pname=(ns,"AverageRating"), aname="_AverageRating", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalReviews"), aname="_TotalReviews", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalReviewPages"), aname="_TotalReviewPages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Review",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CustomerReviews")
            kw["aname"] = "_CustomerReviews"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._AverageRating = None
                    self._TotalReviews = None
                    self._TotalReviewPages = None
                    self._Review = None
                    return
            Holder.__name__ = "CustomerReviews_Holder"
            self.pyclass = Holder

    class Review_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Review"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Review_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"Rating"), aname="_Rating", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"HelpfulVotes"), aname="_HelpfulVotes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CustomerId"), aname="_CustomerId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Reviewer",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalVotes"), aname="_TotalVotes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Date"), aname="_Date", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Summary"), aname="_Summary", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Content"), aname="_Content", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Review")
            kw["aname"] = "_Review"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ASIN = None
                    self._Rating = None
                    self._HelpfulVotes = None
                    self._CustomerId = None
                    self._Reviewer = None
                    self._TotalVotes = None
                    self._Date = None
                    self._Summary = None
                    self._Content = None
                    return
            Holder.__name__ = "Review_Holder"
            self.pyclass = Holder

    class Reviewer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Reviewer"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Reviewer_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"CustomerId"), aname="_CustomerId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Nickname"), aname="_Nickname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Location"), aname="_Location", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Reviewer")
            kw["aname"] = "_Reviewer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CustomerId = None
                    self._Name = None
                    self._Nickname = None
                    self._Location = None
                    return
            Holder.__name__ = "Reviewer_Holder"
            self.pyclass = Holder

    class Tracks_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Tracks"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Tracks_Dec.schema
            TClist = [self.__class__.Disc_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Tracks")
            kw["aname"] = "_Tracks"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Disc = []
                    return
            Holder.__name__ = "Tracks_Holder"
            self.pyclass = Holder


        class Disc_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Disc"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Tracks_Dec.Disc_Dec.schema
                TClist = [self.__class__.Track_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Disc")
                kw["aname"] = "_Disc"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                # attribute handling code
                self.attribute_typecode_dict["Number"] = ZSI.TCnumbers.IpositiveInteger()
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Track = []
                        return
                Holder.__name__ = "Disc_Holder"
                self.pyclass = Holder


            class Track_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "Track"
                schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                def __init__(self, **kw):
                    ns = ns0.Tracks_Dec.Disc_Dec.Track_Dec.schema
                    TClist = []
                    kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Track")
                    kw["aname"] = "_Track"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            return
                    Holder.__name__ = "Track_Holder"
                    self.pyclass = Holder







    class SimilarProducts_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SimilarProducts"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SimilarProducts_Dec.schema
            TClist = [self.__class__.SimilarProduct_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SimilarProducts")
            kw["aname"] = "_SimilarProducts"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SimilarProduct = []
                    return
            Holder.__name__ = "SimilarProducts_Holder"
            self.pyclass = Holder


        class SimilarProduct_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "SimilarProduct"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.SimilarProducts_Dec.SimilarProduct_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SimilarProduct")
                kw["aname"] = "_SimilarProduct"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ASIN = None
                        self._Title = None
                        return
                Holder.__name__ = "SimilarProduct_Holder"
                self.pyclass = Holder




    class TopSellers_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "TopSellers"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.TopSellers_Dec.schema
            TClist = [self.__class__.TopSeller_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","TopSellers")
            kw["aname"] = "_TopSellers"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TopSeller = []
                    return
            Holder.__name__ = "TopSellers_Holder"
            self.pyclass = Holder


        class TopSeller_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "TopSeller"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.TopSellers_Dec.TopSeller_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","TopSeller")
                kw["aname"] = "_TopSeller"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ASIN = None
                        self._Title = None
                        return
                Holder.__name__ = "TopSeller_Holder"
                self.pyclass = Holder




    class NewReleases_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "NewReleases"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.NewReleases_Dec.schema
            TClist = [self.__class__.NewRelease_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NewReleases")
            kw["aname"] = "_NewReleases"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._NewRelease = []
                    return
            Holder.__name__ = "NewReleases_Holder"
            self.pyclass = Holder


        class NewRelease_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "NewRelease"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.NewReleases_Dec.NewRelease_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NewRelease")
                kw["aname"] = "_NewRelease"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ASIN = None
                        self._Title = None
                        return
                Holder.__name__ = "NewRelease_Holder"
                self.pyclass = Holder




    class SimilarViewedProducts_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SimilarViewedProducts"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SimilarViewedProducts_Dec.schema
            TClist = [self.__class__.SimilarViewedProduct_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SimilarViewedProducts")
            kw["aname"] = "_SimilarViewedProducts"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SimilarViewedProduct = []
                    return
            Holder.__name__ = "SimilarViewedProducts_Holder"
            self.pyclass = Holder


        class SimilarViewedProduct_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "SimilarViewedProduct"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.SimilarViewedProducts_Dec.SimilarViewedProduct_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SimilarViewedProduct")
                kw["aname"] = "_SimilarViewedProduct"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ASIN = None
                        self._Title = None
                        return
                Holder.__name__ = "SimilarViewedProduct_Holder"
                self.pyclass = Holder




    class OtherCategoriesSimilarProducts_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "OtherCategoriesSimilarProducts"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.OtherCategoriesSimilarProducts_Dec.schema
            TClist = [self.__class__.OtherCategoriesSimilarProduct_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OtherCategoriesSimilarProducts")
            kw["aname"] = "_OtherCategoriesSimilarProducts"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OtherCategoriesSimilarProduct = []
                    return
            Holder.__name__ = "OtherCategoriesSimilarProducts_Holder"
            self.pyclass = Holder


        class OtherCategoriesSimilarProduct_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "OtherCategoriesSimilarProduct"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.OtherCategoriesSimilarProducts_Dec.OtherCategoriesSimilarProduct_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","OtherCategoriesSimilarProduct")
                kw["aname"] = "_OtherCategoriesSimilarProduct"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ASIN = None
                        self._Title = None
                        return
                Holder.__name__ = "OtherCategoriesSimilarProduct_Holder"
                self.pyclass = Holder




    class Accessories_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Accessories"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Accessories_Dec.schema
            TClist = [self.__class__.Accessory_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Accessories")
            kw["aname"] = "_Accessories"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Accessory = []
                    return
            Holder.__name__ = "Accessories_Holder"
            self.pyclass = Holder


        class Accessory_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Accessory"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Accessories_Dec.Accessory_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Accessory")
                kw["aname"] = "_Accessory"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ASIN = None
                        self._Title = None
                        return
                Holder.__name__ = "Accessory_Holder"
                self.pyclass = Holder




    class Promotions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Promotions"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Promotions_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Promotion",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Promotions")
            kw["aname"] = "_Promotions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Promotion = None
                    return
            Holder.__name__ = "Promotions_Holder"
            self.pyclass = Holder

    class Promotion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Promotion"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Promotion_Dec.schema
            TClist = [self.__class__.Summary_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.Details_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Promotion")
            kw["aname"] = "_Promotion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Summary = None
                    self._Details = None
                    return
            Holder.__name__ = "Promotion_Holder"
            self.pyclass = Holder


        class Summary_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Summary"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Promotion_Dec.Summary_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"PromotionId"), aname="_PromotionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Category"), aname="_Category", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"StartDate"), aname="_StartDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"EndDate"), aname="_EndDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"EligibilityRequirementDescription"), aname="_EligibilityRequirementDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BenefitDescription"), aname="_BenefitDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TermsAndConditions"), aname="_TermsAndConditions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Summary")
                kw["aname"] = "_Summary"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._PromotionId = None
                        self._Category = None
                        self._StartDate = None
                        self._EndDate = None
                        self._EligibilityRequirementDescription = None
                        self._BenefitDescription = None
                        self._TermsAndConditions = None
                        return
                Holder.__name__ = "Summary_Holder"
                self.pyclass = Holder





        class Details_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Details"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Promotion_Dec.Details_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"MerchantId"), aname="_MerchantId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"OwningMerchantId"), aname="_OwningMerchantId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PromotionId"), aname="_PromotionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PromotionCategory"), aname="_PromotionCategory", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MerchantPromotionId"), aname="_MerchantPromotionId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GroupClaimCode"), aname="_GroupClaimCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CouponCombinationType"), aname="_CouponCombinationType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"StartDate"), aname="_StartDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"EndDate"), aname="_EndDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TermsAndConditions"), aname="_TermsAndConditions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","PromotionEligibilityRequirements",lazy=True)(pname=(ns,"EligibilityRequirements"), aname="_EligibilityRequirements", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","PromotionBenefits",lazy=True)(pname=(ns,"Benefits"), aname="_Benefits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","PromotionItemApplicability",lazy=True)(pname=(ns,"ItemApplicability"), aname="_ItemApplicability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Details")
                kw["aname"] = "_Details"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._MerchantId = None
                        self._OwningMerchantId = None
                        self._PromotionId = None
                        self._PromotionCategory = None
                        self._MerchantPromotionId = None
                        self._GroupClaimCode = None
                        self._CouponCombinationType = None
                        self._StartDate = None
                        self._EndDate = None
                        self._TermsAndConditions = None
                        self._EligibilityRequirements = None
                        self._Benefits = None
                        self._ItemApplicability = None
                        return
                Holder.__name__ = "Details_Holder"
                self.pyclass = Holder




    class BrowseNodes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "BrowseNodes"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.BrowseNodes_Dec.schema
            TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Request",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","BrowseNode",lazy=True, isref=True)(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","BrowseNodes")
            kw["aname"] = "_BrowseNodes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Request = None
                    self._BrowseNode = None
                    return
            Holder.__name__ = "BrowseNodes_Holder"
            self.pyclass = Holder

    class BrowseNode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "BrowseNode"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.BrowseNode_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"BrowseNodeId"), aname="_BrowseNodeId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Children_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.Ancestors_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","TopSellers",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NewReleases",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","BrowseNode")
            kw["aname"] = "_BrowseNode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._BrowseNodeId = None
                    self._Name = None
                    self._Children = None
                    self._Ancestors = None
                    self._TopSellers = None
                    self._NewReleases = None
                    return
            Holder.__name__ = "BrowseNode_Holder"
            self.pyclass = Holder


        class Children_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Children"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.BrowseNode_Dec.Children_Dec.schema
                TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","BrowseNode",lazy=True, isref=True)(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Children")
                kw["aname"] = "_Children"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._BrowseNode = None
                        return
                Holder.__name__ = "Children_Holder"
                self.pyclass = Holder





        class Ancestors_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Ancestors"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.BrowseNode_Dec.Ancestors_Dec.schema
                TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","BrowseNode",lazy=True, isref=True)(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Ancestors")
                kw["aname"] = "_Ancestors"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._BrowseNode = None
                        return
                Holder.__name__ = "Ancestors_Holder"
                self.pyclass = Holder




    class ListmaniaLists_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ListmaniaLists"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.ListmaniaLists_Dec.schema
            TClist = [self.__class__.ListmaniaList_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListmaniaLists")
            kw["aname"] = "_ListmaniaLists"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ListmaniaList = []
                    return
            Holder.__name__ = "ListmaniaLists_Holder"
            self.pyclass = Holder


        class ListmaniaList_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "ListmaniaList"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.ListmaniaLists_Dec.ListmaniaList_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"ListId"), aname="_ListId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ListName"), aname="_ListName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ListmaniaList")
                kw["aname"] = "_ListmaniaList"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._ListId = None
                        self._ListName = None
                        return
                Holder.__name__ = "ListmaniaList_Holder"
                self.pyclass = Holder




    class SearchInside_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SearchInside"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SearchInside_Dec.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalExcerpts"), aname="_TotalExcerpts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Excerpt_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SearchInside")
            kw["aname"] = "_SearchInside"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TotalExcerpts = None
                    self._Excerpt = None
                    return
            Holder.__name__ = "SearchInside_Holder"
            self.pyclass = Holder


        class Excerpt_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Excerpt"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.SearchInside_Dec.Excerpt_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"Checksum"), aname="_Checksum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PageType"), aname="_PageType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PageNumber"), aname="_PageNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SequenceNumber"), aname="_SequenceNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Text"), aname="_Text", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Excerpt")
                kw["aname"] = "_Excerpt"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Checksum = None
                        self._PageType = None
                        self._PageNumber = None
                        self._SequenceNumber = None
                        self._Text = None
                        return
                Holder.__name__ = "Excerpt_Holder"
                self.pyclass = Holder




    class CartItems_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CartItems"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.CartItems_Dec.schema
            TClist = [GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"SubTotal"), aname="_SubTotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartItem",lazy=True)(pname=(ns,"CartItem"), aname="_CartItem", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartItems")
            kw["aname"] = "_CartItems"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SubTotal = None
                    self._CartItem = []
                    return
            Holder.__name__ = "CartItems_Holder"
            self.pyclass = Holder

    class SavedForLaterItems_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SavedForLaterItems"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SavedForLaterItems_Dec.schema
            TClist = [GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"SubTotal"), aname="_SubTotal", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","CartItem",lazy=True)(pname=(ns,"SavedForLaterItem"), aname="_SavedForLaterItem", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SavedForLaterItems")
            kw["aname"] = "_SavedForLaterItems"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SubTotal = None
                    self._SavedForLaterItem = []
                    return
            Holder.__name__ = "SavedForLaterItems_Holder"
            self.pyclass = Holder

    class Transaction_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Transaction"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Transaction_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"TransactionId"), aname="_TransactionId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SellerId"), aname="_SellerId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Condition"), aname="_Condition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TransactionDate"), aname="_TransactionDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TransactionDateEpoch"), aname="_TransactionDateEpoch", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SellerName"), aname="_SellerName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PayingCustomerId"), aname="_PayingCustomerId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"OrderingCustomerId"), aname="_OrderingCustomerId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Totals_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.TransactionItems_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.Shipments_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Transaction")
            kw["aname"] = "_Transaction"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TransactionId = None
                    self._SellerId = None
                    self._Condition = None
                    self._TransactionDate = None
                    self._TransactionDateEpoch = None
                    self._SellerName = None
                    self._PayingCustomerId = None
                    self._OrderingCustomerId = None
                    self._Totals = None
                    self._TransactionItems = None
                    self._Shipments = None
                    return
            Holder.__name__ = "Transaction_Holder"
            self.pyclass = Holder


        class Totals_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Totals"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Transaction_Dec.Totals_Dec.schema
                TClist = [GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"Total"), aname="_Total", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"Subtotal"), aname="_Subtotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"Tax"), aname="_Tax", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"ShippingCharge"), aname="_ShippingCharge", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"Promotion"), aname="_Promotion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Totals")
                kw["aname"] = "_Totals"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Total = None
                        self._Subtotal = None
                        self._Tax = None
                        self._ShippingCharge = None
                        self._Promotion = None
                        return
                Holder.__name__ = "Totals_Holder"
                self.pyclass = Holder





        class TransactionItems_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "TransactionItems"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Transaction_Dec.TransactionItems_Dec.schema
                TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","TransactionItem",lazy=True, isref=True)(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","TransactionItems")
                kw["aname"] = "_TransactionItems"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._TransactionItem = None
                        return
                Holder.__name__ = "TransactionItems_Holder"
                self.pyclass = Holder





        class Shipments_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Shipments"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Transaction_Dec.Shipments_Dec.schema
                TClist = [self.__class__.Shipment_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Shipments")
                kw["aname"] = "_Shipments"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Shipment = []
                        return
                Holder.__name__ = "Shipments_Holder"
                self.pyclass = Holder


            class Shipment_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "Shipment"
                schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                def __init__(self, **kw):
                    ns = ns0.Transaction_Dec.Shipments_Dec.Shipment_Dec.schema
                    TClist = [ZSI.TC.String(pname=(ns,"Condition"), aname="_Condition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DeliveryMethod"), aname="_DeliveryMethod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.ShipmentItems_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), self.__class__.Packages_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Shipment")
                    kw["aname"] = "_Shipment"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._Condition = None
                            self._DeliveryMethod = None
                            self._ShipmentItems = None
                            self._Packages = None
                            return
                    Holder.__name__ = "Shipment_Holder"
                    self.pyclass = Holder


                class ShipmentItems_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                    literal = "ShipmentItems"
                    schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                    def __init__(self, **kw):
                        ns = ns0.Transaction_Dec.Shipments_Dec.Shipment_Dec.ShipmentItems_Dec.schema
                        TClist = [ZSI.TC.String(pname=(ns,"TransactionItemId"), aname="_TransactionItemId", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
                        kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ShipmentItems")
                        kw["aname"] = "_ShipmentItems"
                        self.attribute_typecode_dict = {}
                        ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                        class Holder:
                            __metaclass__ = pyclass_type
                            typecode = self
                            def __init__(self):
                                # pyclass
                                self._TransactionItemId = []
                                return
                        Holder.__name__ = "ShipmentItems_Holder"
                        self.pyclass = Holder





                class Packages_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                    literal = "Packages"
                    schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                    def __init__(self, **kw):
                        ns = ns0.Transaction_Dec.Shipments_Dec.Shipment_Dec.Packages_Dec.schema
                        TClist = [self.__class__.Package_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                        kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Packages")
                        kw["aname"] = "_Packages"
                        self.attribute_typecode_dict = {}
                        ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                        class Holder:
                            __metaclass__ = pyclass_type
                            typecode = self
                            def __init__(self):
                                # pyclass
                                self._Package = []
                                return
                        Holder.__name__ = "Packages_Holder"
                        self.pyclass = Holder


                    class Package_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                        literal = "Package"
                        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                        def __init__(self, **kw):
                            ns = ns0.Transaction_Dec.Shipments_Dec.Shipment_Dec.Packages_Dec.Package_Dec.schema
                            TClist = [ZSI.TC.String(pname=(ns,"TrackingNumber"), aname="_TrackingNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CarrierName"), aname="_CarrierName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Package")
                            kw["aname"] = "_Package"
                            self.attribute_typecode_dict = {}
                            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                            class Holder:
                                __metaclass__ = pyclass_type
                                typecode = self
                                def __init__(self):
                                    # pyclass
                                    self._TrackingNumber = None
                                    self._CarrierName = None
                                    return
                            Holder.__name__ = "Package_Holder"
                            self.pyclass = Holder













    class TransactionItem_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "TransactionItem"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.TransactionItem_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"TransactionItemId"), aname="_TransactionItemId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"UnitPrice"), aname="_UnitPrice", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"TotalPrice"), aname="_TotalPrice", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.ChildTransactionItems_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","TransactionItem")
            kw["aname"] = "_TransactionItem"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TransactionItemId = None
                    self._Quantity = None
                    self._UnitPrice = None
                    self._TotalPrice = None
                    self._ASIN = None
                    self._ChildTransactionItems = None
                    return
            Holder.__name__ = "TransactionItem_Holder"
            self.pyclass = Holder


        class ChildTransactionItems_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "ChildTransactionItems"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.TransactionItem_Dec.ChildTransactionItems_Dec.schema
                TClist = [GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","TransactionItem",lazy=True, isref=True)(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ChildTransactionItems")
                kw["aname"] = "_ChildTransactionItems"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._TransactionItem = None
                        return
                Holder.__name__ = "ChildTransactionItems_Holder"
                self.pyclass = Holder




    class Seller_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Seller"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.Seller_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"SellerId"), aname="_SellerId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SellerName"), aname="_SellerName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SellerLegalName"), aname="_SellerLegalName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Nickname"), aname="_Nickname", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GlancePage"), aname="_GlancePage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"About"), aname="_About", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MoreAbout"), aname="_MoreAbout", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Location_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"AverageFeedbackRating"), aname="_AverageFeedbackRating", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalFeedback"), aname="_TotalFeedback", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalFeedbackPages"), aname="_TotalFeedbackPages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.SellerFeedbackSummary_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerFeedback",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Seller")
            kw["aname"] = "_Seller"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SellerId = None
                    self._SellerName = None
                    self._SellerLegalName = None
                    self._Nickname = None
                    self._GlancePage = None
                    self._About = None
                    self._MoreAbout = None
                    self._Location = None
                    self._AverageFeedbackRating = None
                    self._TotalFeedback = None
                    self._TotalFeedbackPages = None
                    self._SellerFeedbackSummary = None
                    self._SellerFeedback = None
                    return
            Holder.__name__ = "Seller_Holder"
            self.pyclass = Holder


        class Location_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Location"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Seller_Dec.Location_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"UserDefinedLocation"), aname="_UserDefinedLocation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"City"), aname="_City", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"State"), aname="_State", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Country"), aname="_Country", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Location")
                kw["aname"] = "_Location"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._UserDefinedLocation = None
                        self._City = None
                        self._State = None
                        self._Country = None
                        return
                Holder.__name__ = "Location_Holder"
                self.pyclass = Holder





        class SellerFeedbackSummary_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "SellerFeedbackSummary"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.Seller_Dec.SellerFeedbackSummary_Dec.schema
                TClist = [self.__class__.FeedbackDateRange_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerFeedbackSummary")
                kw["aname"] = "_SellerFeedbackSummary"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._FeedbackDateRange = []
                        return
                Holder.__name__ = "SellerFeedbackSummary_Holder"
                self.pyclass = Holder


            class FeedbackDateRange_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "FeedbackDateRange"
                schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                def __init__(self, **kw):
                    ns = ns0.Seller_Dec.SellerFeedbackSummary_Dec.FeedbackDateRange_Dec.schema
                    TClist = [self.__class__.SellerFeedbackRating_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","FeedbackDateRange")
                    kw["aname"] = "_FeedbackDateRange"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    # attribute handling code
                    self.attribute_typecode_dict["Period"] = ZSI.TC.String()
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._SellerFeedbackRating = []
                            return
                    Holder.__name__ = "FeedbackDateRange_Holder"
                    self.pyclass = Holder


                class SellerFeedbackRating_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                    literal = "SellerFeedbackRating"
                    schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                    def __init__(self, **kw):
                        ns = ns0.Seller_Dec.SellerFeedbackSummary_Dec.FeedbackDateRange_Dec.SellerFeedbackRating_Dec.schema
                        TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"Count"), aname="_Count", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"Percentage"), aname="_Percentage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                        kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerFeedbackRating")
                        kw["aname"] = "_SellerFeedbackRating"
                        self.attribute_typecode_dict = {}
                        ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                        # attribute handling code
                        self.attribute_typecode_dict["Type"] = ZSI.TC.String()
                        class Holder:
                            __metaclass__ = pyclass_type
                            typecode = self
                            def __init__(self):
                                # pyclass
                                self._Count = None
                                self._Percentage = None
                                return
                        Holder.__name__ = "SellerFeedbackRating_Holder"
                        self.pyclass = Holder










    class SellerFeedback_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SellerFeedback"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SellerFeedback_Dec.schema
            TClist = [self.__class__.Feedback_Dec(minOccurs=1, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerFeedback")
            kw["aname"] = "_SellerFeedback"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Feedback = []
                    return
            Holder.__name__ = "SellerFeedback_Holder"
            self.pyclass = Holder


        class Feedback_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Feedback"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.SellerFeedback_Dec.Feedback_Dec.schema
                TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"Rating"), aname="_Rating", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Comment"), aname="_Comment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Date"), aname="_Date", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RatedBy"), aname="_RatedBy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Feedback")
                kw["aname"] = "_Feedback"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Rating = None
                        self._Comment = None
                        self._Date = None
                        self._RatedBy = None
                        return
                Holder.__name__ = "Feedback_Holder"
                self.pyclass = Holder




    class SellerListing_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SellerListing"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.SellerListing_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"ExchangeId"), aname="_ExchangeId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ListingId"), aname="_ListingId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ASIN"), aname="_ASIN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SKU"), aname="_SKU", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UPC"), aname="_UPC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"EAN"), aname="_EAN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"WillShipExpedited"), aname="_WillShipExpedited", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"WillShipInternational"), aname="_WillShipInternational", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"Price"), aname="_Price", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"StartDate"), aname="_StartDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"EndDate"), aname="_EndDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Status"), aname="_Status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Quantity"), aname="_Quantity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Condition"), aname="_Condition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SubCondition"), aname="_SubCondition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GED("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Seller",lazy=True, isref=True)(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","SellerListing")
            kw["aname"] = "_SellerListing"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ExchangeId = None
                    self._ListingId = None
                    self._ASIN = None
                    self._SKU = None
                    self._UPC = None
                    self._EAN = None
                    self._WillShipExpedited = None
                    self._WillShipInternational = None
                    self._Title = None
                    self._Price = None
                    self._StartDate = None
                    self._EndDate = None
                    self._Status = None
                    self._Quantity = None
                    self._Condition = None
                    self._SubCondition = None
                    self._Seller = None
                    return
            Holder.__name__ = "SellerListing_Holder"
            self.pyclass = Holder

    class ImageSet_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ImageSet"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.ImageSet_Dec.schema
            TClist = [GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Image",lazy=True)(pname=(ns,"SwatchImage"), aname="_SwatchImage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Image",lazy=True)(pname=(ns,"SmallImage"), aname="_SmallImage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Image",lazy=True)(pname=(ns,"MediumImage"), aname="_MediumImage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Image",lazy=True)(pname=(ns,"LargeImage"), aname="_LargeImage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ImageSet")
            kw["aname"] = "_ImageSet"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            # attribute handling code
            self.attribute_typecode_dict["Category"] = ZSI.TC.String()
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SwatchImage = None
                    self._SmallImage = None
                    self._MediumImage = None
                    self._LargeImage = None
                    return
            Holder.__name__ = "ImageSet_Holder"
            self.pyclass = Holder

    class ItemAttributes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ItemAttributes"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.ItemAttributes_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Actor"), aname="_Actor", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Address",lazy=True)(pname=(ns,"Address"), aname="_Address", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"AmazonMaximumAge"), aname="_AmazonMaximumAge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"AmazonMinimumAge"), aname="_AmazonMinimumAge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AnalogVideoFormat"), aname="_AnalogVideoFormat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApertureModes"), aname="_ApertureModes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Artist"), aname="_Artist", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AspectRatio"), aname="_AspectRatio", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssemblyInstructions"), aname="_AssemblyInstructions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssemblyRequired"), aname="_AssemblyRequired", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AudienceRating"), aname="_AudienceRating", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AudioFormat"), aname="_AudioFormat", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Author"), aname="_Author", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BackFinding"), aname="_BackFinding", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BandMaterialType"), aname="_BandMaterialType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BatteriesIncluded"), aname="_BatteriesIncluded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BatteriesRequired"), aname="_BatteriesRequired", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NonNegativeIntegerWithUnits",lazy=True)(pname=(ns,"Batteries"), aname="_Batteries", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BatteryDescription"), aname="_BatteryDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BatteryType"), aname="_BatteryType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BezelMaterialType"), aname="_BezelMaterialType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Binding"), aname="_Binding", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Brand"), aname="_Brand", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CalendarType"), aname="_CalendarType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CameraManualFeatures"), aname="_CameraManualFeatures", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"CaseDiameter"), aname="_CaseDiameter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CaseMaterialType"), aname="_CaseMaterialType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"CaseThickness"), aname="_CaseThickness", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CaseType"), aname="_CaseType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CatalogNumber"), aname="_CatalogNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CDRWDescription"), aname="_CDRWDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ChainType"), aname="_ChainType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CEROAgeRating"), aname="_CEROAgeRating", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ClaspType"), aname="_ClaspType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ClothingSize"), aname="_ClothingSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ClubType"), aname="_ClubType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Color"), aname="_Color", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Compatibility"), aname="_Compatibility", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CompatibleDevices"), aname="_CompatibleDevices", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ComputerHardwareType"), aname="_ComputerHardwareType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ComputerPlatform"), aname="_ComputerPlatform", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Connectivity"), aname="_Connectivity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"ContinuousShootingSpeed"), aname="_ContinuousShootingSpeed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Country"), aname="_Country", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CPUManufacturer"), aname="_CPUManufacturer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"CPUSpeed"), aname="_CPUSpeed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CPUType"), aname="_CPUType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Creator_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Cuisine"), aname="_Cuisine", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DataLinkProtocol"), aname="_DataLinkProtocol", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DeliveryOption"), aname="_DeliveryOption", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"DelayBetweenShots"), aname="_DelayBetweenShots", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Department"), aname="_Department", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DeweyDecimalNumber"), aname="_DeweyDecimalNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DialColor"), aname="_DialColor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DialWindowMaterialType"), aname="_DialWindowMaterialType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"DigitalZoom"), aname="_DigitalZoom", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Director"), aname="_Director", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DisplayColorSupport"), aname="_DisplayColorSupport", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"DisplaySize"), aname="_DisplaySize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"DrumSetPieceQuantity"), aname="_DrumSetPieceQuantity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"DVDLayers"), aname="_DVDLayers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DVDRWDescription"), aname="_DVDRWDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"DVDSides"), aname="_DVDSides", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DPCI"), aname="_DPCI", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"EAN"), aname="_EAN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Edition"), aname="_Edition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ESRBAgeRating"), aname="_ESRBAgeRating", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ExternalDisplaySupportDescription"), aname="_ExternalDisplaySupportDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FabricType"), aname="_FabricType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FaxNumber"), aname="_FaxNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Feature"), aname="_Feature", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FilmColorType"), aname="_FilmColorType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","StringWithUnits",lazy=True)(pname=(ns,"FirstIssueLeadTime"), aname="_FirstIssueLeadTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FloppyDiskDriveDescription"), aname="_FloppyDiskDriveDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Format"), aname="_Format", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FormFactor"), aname="_FormFactor", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GemType"), aname="_GemType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Genre"), aname="_Genre", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GraphicsCardInterface"), aname="_GraphicsCardInterface", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GraphicsDescription"), aname="_GraphicsDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"GraphicsMemorySize"), aname="_GraphicsMemorySize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GuitarAttribute"), aname="_GuitarAttribute", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GuitarBridgeSystem"), aname="_GuitarBridgeSystem", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GuitarPickThickness"), aname="_GuitarPickThickness", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GuitarPickupConfiguration"), aname="_GuitarPickupConfiguration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"HandOrientation"), aname="_HandOrientation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"HardDiskCount"), aname="_HardDiskCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"HardDiskSize"), aname="_HardDiskSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"HardDiskInterface"), aname="_HardDiskInterface", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"HardwarePlatform"), aname="_HardwarePlatform", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasAutoFocus"), aname="_HasAutoFocus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasBurstMode"), aname="_HasBurstMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasInCameraEditing"), aname="_HasInCameraEditing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasRedEyeReduction"), aname="_HasRedEyeReduction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasSelfTimer"), aname="_HasSelfTimer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasTripodMount"), aname="_HasTripodMount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasVideoOut"), aname="_HasVideoOut", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasViewfinder"), aname="_HasViewfinder", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"HazardousMaterialType"), aname="_HazardousMaterialType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"HoursOfOperation"), aname="_HoursOfOperation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"IncludedSoftware"), aname="_IncludedSoftware", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IncludesMp3Player"), aname="_IncludesMp3Player", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Ingredients"), aname="_Ingredients", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"InstrumentKey"), aname="_InstrumentKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsAdultProduct"), aname="_IsAdultProduct", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsAutographed"), aname="_IsAutographed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ISBN"), aname="_ISBN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsFragile"), aname="_IsFragile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsLabCreated"), aname="_IsLabCreated", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsMemorabilia"), aname="_IsMemorabilia", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NonNegativeIntegerWithUnits",lazy=True)(pname=(ns,"ISOEquivalent"), aname="_ISOEquivalent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsPreannounce"), aname="_IsPreannounce", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"IssuesPerYear"), aname="_IssuesPerYear", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.ItemDimensions_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"KeyboardDescription"), aname="_KeyboardDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Label"), aname="_Label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Languages_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LegalDisclaimer"), aname="_LegalDisclaimer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LensType"), aname="_LensType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LineVoltage"), aname="_LineVoltage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"ListPrice"), aname="_ListPrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MacroFocusRange"), aname="_MacroFocusRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MagazineType"), aname="_MagazineType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MalletHardness"), aname="_MalletHardness", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Manufacturer"), aname="_Manufacturer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ManufacturerLaborWarrantyDescription"), aname="_ManufacturerLaborWarrantyDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"ManufacturerMaximumAge"), aname="_ManufacturerMaximumAge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"ManufacturerMinimumAge"), aname="_ManufacturerMinimumAge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ManufacturerPartsWarrantyDescription"), aname="_ManufacturerPartsWarrantyDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MaterialType"), aname="_MaterialType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MaximumAperture"), aname="_MaximumAperture", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MaximumColorDepth"), aname="_MaximumColorDepth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MaximumFocalLength"), aname="_MaximumFocalLength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NonNegativeIntegerWithUnits",lazy=True)(pname=(ns,"MaximumHighResolutionImages"), aname="_MaximumHighResolutionImages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NonNegativeIntegerWithUnits",lazy=True)(pname=(ns,"MaximumHorizontalResolution"), aname="_MaximumHorizontalResolution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MaximumLowResolutionImages"), aname="_MaximumLowResolutionImages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MaximumResolution"), aname="_MaximumResolution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MaximumShutterSpeed"), aname="_MaximumShutterSpeed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NonNegativeIntegerWithUnits",lazy=True)(pname=(ns,"MaximumVerticalResolution"), aname="_MaximumVerticalResolution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MaximumWeightRecommendation"), aname="_MaximumWeightRecommendation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MediaType"), aname="_MediaType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MemorySlotsAvailable"), aname="_MemorySlotsAvailable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MetalStamp"), aname="_MetalStamp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MetalType"), aname="_MetalType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MiniMovieDescription"), aname="_MiniMovieDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MinimumFocalLength"), aname="_MinimumFocalLength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MinimumShutterSpeed"), aname="_MinimumShutterSpeed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Model"), aname="_Model", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"ModelYear"), aname="_ModelYear", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ModemDescription"), aname="_ModemDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MonitorSize"), aname="_MonitorSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MonitorViewableDiagonalSize"), aname="_MonitorViewableDiagonalSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MouseDescription"), aname="_MouseDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MPN"), aname="_MPN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MusicalStyle"), aname="_MusicalStyle", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NativeResolution"), aname="_NativeResolution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Neighborhood"), aname="_Neighborhood", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NetworkInterfaceDescription"), aname="_NetworkInterfaceDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NotebookDisplayTechnology"), aname="_NotebookDisplayTechnology", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NotebookPointingDeviceDescription"), aname="_NotebookPointingDeviceDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfDiscs"), aname="_NumberOfDiscs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfIssues"), aname="_NumberOfIssues", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfItems"), aname="_NumberOfItems", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfKeys"), aname="_NumberOfKeys", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfPages"), aname="_NumberOfPages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfPearls"), aname="_NumberOfPearls", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfRapidFireShots"), aname="_NumberOfRapidFireShots", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfStones"), aname="_NumberOfStones", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfStrings"), aname="_NumberOfStrings", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfTracks"), aname="_NumberOfTracks", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"OperatingSystem"), aname="_OperatingSystem", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"OpticalSensorResolution"), aname="_OpticalSensorResolution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"OpticalZoom"), aname="_OpticalZoom", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"OriginalReleaseDate"), aname="_OriginalReleaseDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"OutputWattage"), aname="_OutputWattage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.PackageDimensions_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PearlLustre"), aname="_PearlLustre", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PearlMinimumColor"), aname="_PearlMinimumColor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PearlShape"), aname="_PearlShape", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PearlStringingMethod"), aname="_PearlStringingMethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PearlSurfaceBlemishes"), aname="_PearlSurfaceBlemishes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PearlType"), aname="_PearlType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PearlUniformity"), aname="_PearlUniformity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PhoneNumber"), aname="_PhoneNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PhotoFlashType"), aname="_PhotoFlashType", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PictureFormat"), aname="_PictureFormat", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Platform"), aname="_Platform", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"PriceRating"), aname="_PriceRating", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"ProcessorCount"), aname="_ProcessorCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProductGroup"), aname="_ProductGroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProductSiteLaunchDate"), aname="_ProductSiteLaunchDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProductTypeName"), aname="_ProductTypeName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProductTypeSubcategory"), aname="_ProductTypeSubcategory", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PromotionalTag"), aname="_PromotionalTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PublicationDate"), aname="_PublicationDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Publisher"), aname="_Publisher", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"POBoxShippingExcluded"), aname="_POBoxShippingExcluded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReadingLevel"), aname="_ReadingLevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReturnMethod"), aname="_ReturnMethod", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"RecorderTrackCount"), aname="_RecorderTrackCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RegionCode"), aname="_RegionCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RegionOfOrigin"), aname="_RegionOfOrigin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReturnPolicy"), aname="_ReturnPolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReleaseDate"), aname="_ReleaseDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RemovableMemory"), aname="_RemovableMemory", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RemovableStorage"), aname="_RemovableStorage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RequiredVoltageRange"), aname="_RequiredVoltageRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResolutionModes"), aname="_ResolutionModes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RingSize"), aname="_RingSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"RunningTime"), aname="_RunningTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NonNegativeIntegerWithUnits",lazy=True)(pname=(ns,"SecondaryCacheSize"), aname="_SecondaryCacheSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SettingType"), aname="_SettingType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ShaftMaterialType"), aname="_ShaftMaterialType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Size"), aname="_Size", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SizePerPearl"), aname="_SizePerPearl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SkillLevel"), aname="_SkillLevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SKU"), aname="_SKU", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SoldInStores"), aname="_SoldInStores", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SoundCardDescription"), aname="_SoundCardDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"SpeakerCount"), aname="_SpeakerCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SpeakerDescription"), aname="_SpeakerDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SpecialFeatures"), aname="_SpecialFeatures", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"StoneClarity"), aname="_StoneClarity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"StoneColor"), aname="_StoneColor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"StoneCut"), aname="_StoneCut", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"StoneShape"), aname="_StoneShape", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"StoneWeight"), aname="_StoneWeight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Studio"), aname="_Studio", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NonNegativeIntegerWithUnits",lazy=True)(pname=(ns,"SubscriptionLength"), aname="_SubscriptionLength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SupportedImageType"), aname="_SupportedImageType", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SupportedMediaSize"), aname="_SupportedMediaSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"SystemBusSpeed"), aname="_SystemBusSpeed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"SystemMemorySizeMax"), aname="_SystemMemorySizeMax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"SystemMemorySize"), aname="_SystemMemorySize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SystemMemoryType"), aname="_SystemMemoryType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TellingPageIndicator"), aname="_TellingPageIndicator", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TheatricalReleaseDate"), aname="_TheatricalReleaseDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"TotalDiamondWeight"), aname="_TotalDiamondWeight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalExternalBaysFree"), aname="_TotalExternalBaysFree", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalFirewirePorts"), aname="_TotalFirewirePorts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"TotalGemWeight"), aname="_TotalGemWeight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalInternalBaysFree"), aname="_TotalInternalBaysFree", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"TotalMetalWeight"), aname="_TotalMetalWeight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalNTSCPALPorts"), aname="_TotalNTSCPALPorts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalParallelPorts"), aname="_TotalParallelPorts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalPCCardSlots"), aname="_TotalPCCardSlots", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalPCISlotsFree"), aname="_TotalPCISlotsFree", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalSerialPorts"), aname="_TotalSerialPorts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalSVideoOutPorts"), aname="_TotalSVideoOutPorts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalUSB2Ports"), aname="_TotalUSB2Ports", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalUSBPorts"), aname="_TotalUSBPorts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalVGAOutPorts"), aname="_TotalVGAOutPorts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UPC"), aname="_UPC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"VariationDenomination"), aname="_VariationDenomination", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"VariationDescription"), aname="_VariationDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Warranty"), aname="_Warranty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"WatchMovementType"), aname="_WatchMovementType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"WaterResistanceDepth"), aname="_WaterResistanceDepth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"WEEETaxValue"), aname="_WEEETaxValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"WirelessMicrophoneFrequency"), aname="_WirelessMicrophoneFrequency", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemAttributes")
            kw["aname"] = "_ItemAttributes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Actor = []
                    self._Address = None
                    self._AmazonMaximumAge = None
                    self._AmazonMinimumAge = None
                    self._AnalogVideoFormat = None
                    self._ApertureModes = None
                    self._Artist = []
                    self._AspectRatio = None
                    self._AssemblyInstructions = None
                    self._AssemblyRequired = None
                    self._AudienceRating = None
                    self._AudioFormat = []
                    self._Author = []
                    self._BackFinding = None
                    self._BandMaterialType = None
                    self._BatteriesIncluded = None
                    self._BatteriesRequired = None
                    self._Batteries = None
                    self._BatteryDescription = None
                    self._BatteryType = None
                    self._BezelMaterialType = None
                    self._Binding = None
                    self._Brand = None
                    self._CalendarType = None
                    self._CameraManualFeatures = []
                    self._CaseDiameter = None
                    self._CaseMaterialType = None
                    self._CaseThickness = None
                    self._CaseType = None
                    self._CatalogNumber = None
                    self._CDRWDescription = None
                    self._ChainType = None
                    self._CEROAgeRating = None
                    self._ClaspType = None
                    self._ClothingSize = None
                    self._ClubType = None
                    self._Color = None
                    self._Compatibility = None
                    self._CompatibleDevices = []
                    self._ComputerHardwareType = None
                    self._ComputerPlatform = None
                    self._Connectivity = None
                    self._ContinuousShootingSpeed = None
                    self._Country = None
                    self._CPUManufacturer = None
                    self._CPUSpeed = None
                    self._CPUType = None
                    self._Creator = []
                    self._Cuisine = None
                    self._DataLinkProtocol = []
                    self._DeliveryOption = None
                    self._DelayBetweenShots = None
                    self._Department = None
                    self._DeweyDecimalNumber = None
                    self._DialColor = None
                    self._DialWindowMaterialType = None
                    self._DigitalZoom = None
                    self._Director = []
                    self._DisplayColorSupport = None
                    self._DisplaySize = None
                    self._DrumSetPieceQuantity = None
                    self._DVDLayers = None
                    self._DVDRWDescription = None
                    self._DVDSides = None
                    self._DPCI = None
                    self._EAN = None
                    self._Edition = None
                    self._ESRBAgeRating = None
                    self._ExternalDisplaySupportDescription = None
                    self._FabricType = None
                    self._FaxNumber = None
                    self._Feature = []
                    self._FilmColorType = None
                    self._FirstIssueLeadTime = None
                    self._FloppyDiskDriveDescription = None
                    self._Format = []
                    self._FormFactor = []
                    self._GemType = None
                    self._Genre = None
                    self._GraphicsCardInterface = None
                    self._GraphicsDescription = None
                    self._GraphicsMemorySize = None
                    self._GuitarAttribute = None
                    self._GuitarBridgeSystem = None
                    self._GuitarPickThickness = None
                    self._GuitarPickupConfiguration = None
                    self._HandOrientation = None
                    self._HardDiskCount = None
                    self._HardDiskSize = None
                    self._HardDiskInterface = None
                    self._HardwarePlatform = None
                    self._HasAutoFocus = None
                    self._HasBurstMode = None
                    self._HasInCameraEditing = None
                    self._HasRedEyeReduction = None
                    self._HasSelfTimer = None
                    self._HasTripodMount = None
                    self._HasVideoOut = None
                    self._HasViewfinder = None
                    self._HazardousMaterialType = None
                    self._HoursOfOperation = None
                    self._IncludedSoftware = None
                    self._IncludesMp3Player = None
                    self._Ingredients = None
                    self._InstrumentKey = None
                    self._IsAdultProduct = None
                    self._IsAutographed = None
                    self._ISBN = None
                    self._IsFragile = None
                    self._IsLabCreated = None
                    self._IsMemorabilia = None
                    self._ISOEquivalent = None
                    self._IsPreannounce = None
                    self._IssuesPerYear = None
                    self._ItemDimensions = None
                    self._KeyboardDescription = None
                    self._Label = None
                    self._Languages = None
                    self._LegalDisclaimer = None
                    self._LensType = None
                    self._LineVoltage = None
                    self._ListPrice = None
                    self._MacroFocusRange = None
                    self._MagazineType = None
                    self._MalletHardness = None
                    self._Manufacturer = None
                    self._ManufacturerLaborWarrantyDescription = None
                    self._ManufacturerMaximumAge = None
                    self._ManufacturerMinimumAge = None
                    self._ManufacturerPartsWarrantyDescription = None
                    self._MaterialType = None
                    self._MaximumAperture = None
                    self._MaximumColorDepth = None
                    self._MaximumFocalLength = None
                    self._MaximumHighResolutionImages = None
                    self._MaximumHorizontalResolution = None
                    self._MaximumLowResolutionImages = None
                    self._MaximumResolution = None
                    self._MaximumShutterSpeed = None
                    self._MaximumVerticalResolution = None
                    self._MaximumWeightRecommendation = None
                    self._MediaType = None
                    self._MemorySlotsAvailable = None
                    self._MetalStamp = None
                    self._MetalType = None
                    self._MiniMovieDescription = None
                    self._MinimumFocalLength = None
                    self._MinimumShutterSpeed = None
                    self._Model = None
                    self._ModelYear = None
                    self._ModemDescription = None
                    self._MonitorSize = None
                    self._MonitorViewableDiagonalSize = None
                    self._MouseDescription = None
                    self._MPN = None
                    self._MusicalStyle = None
                    self._NativeResolution = None
                    self._Neighborhood = None
                    self._NetworkInterfaceDescription = None
                    self._NotebookDisplayTechnology = None
                    self._NotebookPointingDeviceDescription = None
                    self._NumberOfDiscs = None
                    self._NumberOfIssues = None
                    self._NumberOfItems = None
                    self._NumberOfKeys = None
                    self._NumberOfPages = None
                    self._NumberOfPearls = None
                    self._NumberOfRapidFireShots = None
                    self._NumberOfStones = None
                    self._NumberOfStrings = None
                    self._NumberOfTracks = None
                    self._OperatingSystem = None
                    self._OpticalSensorResolution = None
                    self._OpticalZoom = None
                    self._OriginalReleaseDate = None
                    self._OutputWattage = None
                    self._PackageDimensions = None
                    self._PearlLustre = None
                    self._PearlMinimumColor = None
                    self._PearlShape = None
                    self._PearlStringingMethod = None
                    self._PearlSurfaceBlemishes = None
                    self._PearlType = None
                    self._PearlUniformity = None
                    self._PhoneNumber = None
                    self._PhotoFlashType = []
                    self._PictureFormat = []
                    self._Platform = []
                    self._PriceRating = None
                    self._ProcessorCount = None
                    self._ProductGroup = None
                    self._ProductSiteLaunchDate = None
                    self._ProductTypeName = None
                    self._ProductTypeSubcategory = None
                    self._PromotionalTag = None
                    self._PublicationDate = None
                    self._Publisher = None
                    self._POBoxShippingExcluded = None
                    self._ReadingLevel = None
                    self._ReturnMethod = []
                    self._RecorderTrackCount = None
                    self._RegionCode = None
                    self._RegionOfOrigin = None
                    self._ReturnPolicy = None
                    self._ReleaseDate = None
                    self._RemovableMemory = None
                    self._RemovableStorage = None
                    self._RequiredVoltageRange = None
                    self._ResolutionModes = None
                    self._RingSize = None
                    self._RunningTime = None
                    self._SecondaryCacheSize = None
                    self._SettingType = None
                    self._ShaftMaterialType = None
                    self._Size = None
                    self._SizePerPearl = None
                    self._SkillLevel = None
                    self._SKU = None
                    self._SoldInStores = None
                    self._SoundCardDescription = None
                    self._SpeakerCount = None
                    self._SpeakerDescription = None
                    self._SpecialFeatures = []
                    self._StoneClarity = None
                    self._StoneColor = None
                    self._StoneCut = None
                    self._StoneShape = None
                    self._StoneWeight = None
                    self._Studio = None
                    self._SubscriptionLength = None
                    self._SupportedImageType = []
                    self._SupportedMediaSize = None
                    self._SystemBusSpeed = None
                    self._SystemMemorySizeMax = None
                    self._SystemMemorySize = None
                    self._SystemMemoryType = None
                    self._TellingPageIndicator = None
                    self._TheatricalReleaseDate = None
                    self._Title = None
                    self._TotalDiamondWeight = None
                    self._TotalExternalBaysFree = None
                    self._TotalFirewirePorts = None
                    self._TotalGemWeight = None
                    self._TotalInternalBaysFree = None
                    self._TotalMetalWeight = None
                    self._TotalNTSCPALPorts = None
                    self._TotalParallelPorts = None
                    self._TotalPCCardSlots = None
                    self._TotalPCISlotsFree = None
                    self._TotalSerialPorts = None
                    self._TotalSVideoOutPorts = None
                    self._TotalUSB2Ports = None
                    self._TotalUSBPorts = None
                    self._TotalVGAOutPorts = None
                    self._UPC = None
                    self._VariationDenomination = None
                    self._VariationDescription = None
                    self._Warranty = None
                    self._WatchMovementType = None
                    self._WaterResistanceDepth = None
                    self._WEEETaxValue = None
                    self._WirelessMicrophoneFrequency = None
                    return
            Holder.__name__ = "ItemAttributes_Holder"
            self.pyclass = Holder


        class Creator_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Creator"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.ItemAttributes_Dec.Creator_Dec.schema
                TClist = []
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Creator")
                kw["aname"] = "_Creator"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        return
                Holder.__name__ = "Creator_Holder"
                self.pyclass = Holder





        class ItemDimensions_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "ItemDimensions"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.ItemAttributes_Dec.ItemDimensions_Dec.schema
                TClist = [GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Height"), aname="_Height", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Length"), aname="_Length", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Weight"), aname="_Weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Width"), aname="_Width", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemDimensions")
                kw["aname"] = "_ItemDimensions"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Height = None
                        self._Length = None
                        self._Weight = None
                        self._Width = None
                        return
                Holder.__name__ = "ItemDimensions_Holder"
                self.pyclass = Holder





        class Languages_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Languages"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.ItemAttributes_Dec.Languages_Dec.schema
                TClist = [self.__class__.Language_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Languages")
                kw["aname"] = "_Languages"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Language = []
                        return
                Holder.__name__ = "Languages_Holder"
                self.pyclass = Holder


            class Language_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "Language"
                schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                def __init__(self, **kw):
                    ns = ns0.ItemAttributes_Dec.Languages_Dec.Language_Dec.schema
                    TClist = [ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Type"), aname="_Type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AudioFormat"), aname="_AudioFormat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Language")
                    kw["aname"] = "_Language"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._Name = None
                            self._Type = None
                            self._AudioFormat = None
                            return
                    Holder.__name__ = "Language_Holder"
                    self.pyclass = Holder








        class PackageDimensions_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "PackageDimensions"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.ItemAttributes_Dec.PackageDimensions_Dec.schema
                TClist = [GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Height"), aname="_Height", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Length"), aname="_Length", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Weight"), aname="_Weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Width"), aname="_Width", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","PackageDimensions")
                kw["aname"] = "_PackageDimensions"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Height = None
                        self._Length = None
                        self._Weight = None
                        self._Width = None
                        return
                Holder.__name__ = "PackageDimensions_Holder"
                self.pyclass = Holder




    class MerchantItemAttributes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "MerchantItemAttributes"
        schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
        def __init__(self, **kw):
            ns = ns0.MerchantItemAttributes_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Actor"), aname="_Actor", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Address",lazy=True)(pname=(ns,"Address"), aname="_Address", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"AmazonMaximumAge"), aname="_AmazonMaximumAge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"AmazonMinimumAge"), aname="_AmazonMinimumAge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ApertureModes"), aname="_ApertureModes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Artist"), aname="_Artist", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AspectRatio"), aname="_AspectRatio", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssemblyInstructions"), aname="_AssemblyInstructions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AssemblyRequired"), aname="_AssemblyRequired", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AudienceRating"), aname="_AudienceRating", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AudioFormat"), aname="_AudioFormat", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Author"), aname="_Author", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BackFinding"), aname="_BackFinding", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BandMaterialType"), aname="_BandMaterialType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BatteriesIncluded"), aname="_BatteriesIncluded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BatteriesRequired"), aname="_BatteriesRequired", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NonNegativeIntegerWithUnits",lazy=True)(pname=(ns,"Batteries"), aname="_Batteries", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BatteryDescription"), aname="_BatteryDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BatteryType"), aname="_BatteryType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"BezelMaterialType"), aname="_BezelMaterialType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Binding"), aname="_Binding", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Brand"), aname="_Brand", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CalendarType"), aname="_CalendarType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CameraManualFeatures"), aname="_CameraManualFeatures", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"CaseDiameter"), aname="_CaseDiameter", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CaseMaterialType"), aname="_CaseMaterialType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"CaseThickness"), aname="_CaseThickness", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CaseType"), aname="_CaseType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CatalogNumber"), aname="_CatalogNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CDRWDescription"), aname="_CDRWDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ChainType"), aname="_ChainType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ClaspType"), aname="_ClaspType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ClothingSize"), aname="_ClothingSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Color"), aname="_Color", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Compatibility"), aname="_Compatibility", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ComputerHardwareType"), aname="_ComputerHardwareType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ComputerPlatform"), aname="_ComputerPlatform", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Connectivity"), aname="_Connectivity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"ContinuousShootingSpeed"), aname="_ContinuousShootingSpeed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Country"), aname="_Country", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CountryOfOrigin"), aname="_CountryOfOrigin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CPUManufacturer"), aname="_CPUManufacturer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"CPUSpeed"), aname="_CPUSpeed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CPUType"), aname="_CPUType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Creator_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Cuisine"), aname="_Cuisine", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Customizable"), aname="_Customizable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"DelayBetweenShots"), aname="_DelayBetweenShots", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DeliveryOption"), aname="_DeliveryOption", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Department"), aname="_Department", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Description"), aname="_Description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DeweyDecimalNumber"), aname="_DeweyDecimalNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DialColor"), aname="_DialColor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DialWindowMaterialType"), aname="_DialWindowMaterialType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"DigitalZoom"), aname="_DigitalZoom", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Director"), aname="_Director", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"DisplaySize"), aname="_DisplaySize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"DrumSetPieceQuantity"), aname="_DrumSetPieceQuantity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"DVDLayers"), aname="_DVDLayers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DVDRWDescription"), aname="_DVDRWDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"DVDSides"), aname="_DVDSides", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DPCI"), aname="_DPCI", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"EAN"), aname="_EAN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Edition"), aname="_Edition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ESRBAgeRating"), aname="_ESRBAgeRating", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ExternalDisplaySupportDescription"), aname="_ExternalDisplaySupportDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FabricType"), aname="_FabricType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FaxNumber"), aname="_FaxNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Feature"), aname="_Feature", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","StringWithUnits",lazy=True)(pname=(ns,"FirstIssueLeadTime"), aname="_FirstIssueLeadTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FloppyDiskDriveDescription"), aname="_FloppyDiskDriveDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Format"), aname="_Format", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"FixedShippingCharge"), aname="_FixedShippingCharge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GemType"), aname="_GemType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GraphicsCardInterface"), aname="_GraphicsCardInterface", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GraphicsDescription"), aname="_GraphicsDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"GraphicsMemorySize"), aname="_GraphicsMemorySize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GuitarAttribute"), aname="_GuitarAttribute", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GuitarBridgeSystem"), aname="_GuitarBridgeSystem", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GuitarPickThickness"), aname="_GuitarPickThickness", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"GuitarPickupConfiguration"), aname="_GuitarPickupConfiguration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"HardDiskCount"), aname="_HardDiskCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NonNegativeIntegerWithUnits",lazy=True)(pname=(ns,"HardDiskSize"), aname="_HardDiskSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasAutoFocus"), aname="_HasAutoFocus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasBurstMode"), aname="_HasBurstMode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasInCameraEditing"), aname="_HasInCameraEditing", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasRedEyeReduction"), aname="_HasRedEyeReduction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasSelfTimer"), aname="_HasSelfTimer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasTripodMount"), aname="_HasTripodMount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasVideoOut"), aname="_HasVideoOut", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"HasViewfinder"), aname="_HasViewfinder", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"HazardousMaterialType"), aname="_HazardousMaterialType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"HoursOfOperation"), aname="_HoursOfOperation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"IncludedSoftware"), aname="_IncludedSoftware", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IncludesMp3Player"), aname="_IncludesMp3Player", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Indications"), aname="_Indications", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Ingredients"), aname="_Ingredients", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"InstrumentKey"), aname="_InstrumentKey", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsAutographed"), aname="_IsAutographed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ISBN"), aname="_ISBN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsFragile"), aname="_IsFragile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsLabCreated"), aname="_IsLabCreated", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsMemorabilia"), aname="_IsMemorabilia", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NonNegativeIntegerWithUnits",lazy=True)(pname=(ns,"ISOEquivalent"), aname="_ISOEquivalent", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"IssuesPerYear"), aname="_IssuesPerYear", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.ItemDimensions_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"KeyboardDescription"), aname="_KeyboardDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Label"), aname="_Label", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.Languages_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LegalDisclaimer"), aname="_LegalDisclaimer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"LineVoltage"), aname="_LineVoltage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Price",lazy=True)(pname=(ns,"ListPrice"), aname="_ListPrice", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MacroFocusRange"), aname="_MacroFocusRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MagazineType"), aname="_MagazineType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MalletHardness"), aname="_MalletHardness", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Manufacturer"), aname="_Manufacturer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ManufacturerLaborWarrantyDescription"), aname="_ManufacturerLaborWarrantyDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"ManufacturerMaximumAge"), aname="_ManufacturerMaximumAge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"ManufacturerMinimumAge"), aname="_ManufacturerMinimumAge", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ManufacturerPartsWarrantyDescription"), aname="_ManufacturerPartsWarrantyDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MaterialType"), aname="_MaterialType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MaximumAperture"), aname="_MaximumAperture", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MaximumColorDepth"), aname="_MaximumColorDepth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MaximumFocalLength"), aname="_MaximumFocalLength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NonNegativeIntegerWithUnits",lazy=True)(pname=(ns,"MaximumHighResolutionImages"), aname="_MaximumHighResolutionImages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NonNegativeIntegerWithUnits",lazy=True)(pname=(ns,"MaximumHorizontalResolution"), aname="_MaximumHorizontalResolution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MaximumLowResolutionImages"), aname="_MaximumLowResolutionImages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MaximumResolution"), aname="_MaximumResolution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MaximumShutterSpeed"), aname="_MaximumShutterSpeed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NonNegativeIntegerWithUnits",lazy=True)(pname=(ns,"MaximumVerticalResolution"), aname="_MaximumVerticalResolution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MaximumWeightRecommendation"), aname="_MaximumWeightRecommendation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"MemorySlotsAvailable"), aname="_MemorySlotsAvailable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MetalStamp"), aname="_MetalStamp", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MetalType"), aname="_MetalType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MiniMovieDescription"), aname="_MiniMovieDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MinimumFocalLength"), aname="_MinimumFocalLength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MinimumShutterSpeed"), aname="_MinimumShutterSpeed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Model"), aname="_Model", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"ModelYear"), aname="_ModelYear", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ModemDescription"), aname="_ModemDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MonitorSize"), aname="_MonitorSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"MonitorViewableDiagonalSize"), aname="_MonitorViewableDiagonalSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MouseDescription"), aname="_MouseDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MPN"), aname="_MPN", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MusicalStyle"), aname="_MusicalStyle", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NativeResolution"), aname="_NativeResolution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Neighborhood"), aname="_Neighborhood", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NetworkInterfaceDescription"), aname="_NetworkInterfaceDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NotebookDisplayTechnology"), aname="_NotebookDisplayTechnology", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"NotebookPointingDeviceDescription"), aname="_NotebookPointingDeviceDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfDiscs"), aname="_NumberOfDiscs", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfIssues"), aname="_NumberOfIssues", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfItems"), aname="_NumberOfItems", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfKeys"), aname="_NumberOfKeys", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfPages"), aname="_NumberOfPages", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfPearls"), aname="_NumberOfPearls", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfRapidFireShots"), aname="_NumberOfRapidFireShots", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfStones"), aname="_NumberOfStones", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfStrings"), aname="_NumberOfStrings", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"NumberOfTracks"), aname="_NumberOfTracks", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"OpticalZoom"), aname="_OpticalZoom", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"OriginalReleaseDate"), aname="_OriginalReleaseDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"OutputWattage"), aname="_OutputWattage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.PackageDimensions_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PearlLustre"), aname="_PearlLustre", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PearlMinimumColor"), aname="_PearlMinimumColor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PearlShape"), aname="_PearlShape", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PearlStringingMethod"), aname="_PearlStringingMethod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PearlSurfaceBlemishes"), aname="_PearlSurfaceBlemishes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PearlType"), aname="_PearlType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PearlUniformity"), aname="_PearlUniformity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PhoneNumber"), aname="_PhoneNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PhotoFlashType"), aname="_PhotoFlashType", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PictureFormat"), aname="_PictureFormat", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Platform"), aname="_Platform", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"PriceRating"), aname="_PriceRating", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"ProcessorCount"), aname="_ProcessorCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ProductGroup"), aname="_ProductGroup", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PromotionalTag"), aname="_PromotionalTag", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"POBoxShippingExcluded"), aname="_POBoxShippingExcluded", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PublicationDate"), aname="_PublicationDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Publisher"), aname="_Publisher", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PurchasingChannel"), aname="_PurchasingChannel", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReadingLevel"), aname="_ReadingLevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"RecorderTrackCount"), aname="_RecorderTrackCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RegionCode"), aname="_RegionCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RegionOfOrigin"), aname="_RegionOfOrigin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReleaseDate"), aname="_ReleaseDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReturnMethod"), aname="_ReturnMethod", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RemovableMemory"), aname="_RemovableMemory", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ResolutionModes"), aname="_ResolutionModes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReturnPolicy"), aname="_ReturnPolicy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RingSize"), aname="_RingSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SafetyWarning"), aname="_SafetyWarning", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SalesRestriction"), aname="_SalesRestriction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NonNegativeIntegerWithUnits",lazy=True)(pname=(ns,"SecondaryCacheSize"), aname="_SecondaryCacheSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SettingType"), aname="_SettingType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Size"), aname="_Size", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SKU"), aname="_SKU", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SoldInStores"), aname="_SoldInStores", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SizePerPearl"), aname="_SizePerPearl", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SkillLevel"), aname="_SkillLevel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SoundCardDescription"), aname="_SoundCardDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"SpeakerCount"), aname="_SpeakerCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SpeakerDescription"), aname="_SpeakerDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SpecialFeatures"), aname="_SpecialFeatures", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"StoneClarity"), aname="_StoneClarity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"StoneColor"), aname="_StoneColor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"StoneCut"), aname="_StoneCut", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"StoneShape"), aname="_StoneShape", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"StoneWeight"), aname="_StoneWeight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Studio"), aname="_Studio", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","NonNegativeIntegerWithUnits",lazy=True)(pname=(ns,"SubscriptionLength"), aname="_SubscriptionLength", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SupportedImageType"), aname="_SupportedImageType", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"SystemBusSpeed"), aname="_SystemBusSpeed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"SystemMemorySizeMax"), aname="_SystemMemorySizeMax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"SystemMemorySize"), aname="_SystemMemorySize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SystemMemoryType"), aname="_SystemMemoryType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TellingPageIndicator"), aname="_TellingPageIndicator", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"TheatricalReleaseDate"), aname="_TheatricalReleaseDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Title"), aname="_Title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"TotalDiamondWeight"), aname="_TotalDiamondWeight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalExternalBaysFree"), aname="_TotalExternalBaysFree", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalFirewirePorts"), aname="_TotalFirewirePorts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"TotalGemWeight"), aname="_TotalGemWeight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalInternalBaysFree"), aname="_TotalInternalBaysFree", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"TotalMetalWeight"), aname="_TotalMetalWeight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalNTSCPALPorts"), aname="_TotalNTSCPALPorts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalParallelPorts"), aname="_TotalParallelPorts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalPCCardSlots"), aname="_TotalPCCardSlots", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalPCISlotsFree"), aname="_TotalPCISlotsFree", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalSerialPorts"), aname="_TotalSerialPorts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalSVideoOutPorts"), aname="_TotalSVideoOutPorts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalUSB2Ports"), aname="_TotalUSB2Ports", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalUSBPorts"), aname="_TotalUSBPorts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"TotalVGAOutPorts"), aname="_TotalVGAOutPorts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UPC"), aname="_UPC", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"VariationDenomination"), aname="_VariationDenomination", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"VariationDescription"), aname="_VariationDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.VendorRebate_Dec(minOccurs=0, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Warranty"), aname="_Warranty", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"WatchMovementType"), aname="_WatchMovementType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"WebsiteBuyability"), aname="_WebsiteBuyability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"WaterResistanceDepth"), aname="_WaterResistanceDepth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"WirelessMicrophoneFrequency"), aname="_WirelessMicrophoneFrequency", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","MerchantItemAttributes")
            kw["aname"] = "_MerchantItemAttributes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Actor = []
                    self._Address = None
                    self._AmazonMaximumAge = None
                    self._AmazonMinimumAge = None
                    self._ApertureModes = None
                    self._Artist = []
                    self._AspectRatio = None
                    self._AssemblyInstructions = None
                    self._AssemblyRequired = None
                    self._AudienceRating = None
                    self._AudioFormat = []
                    self._Author = []
                    self._BackFinding = None
                    self._BandMaterialType = None
                    self._BatteriesIncluded = None
                    self._BatteriesRequired = None
                    self._Batteries = None
                    self._BatteryDescription = None
                    self._BatteryType = None
                    self._BezelMaterialType = None
                    self._Binding = None
                    self._Brand = None
                    self._CalendarType = None
                    self._CameraManualFeatures = []
                    self._CaseDiameter = None
                    self._CaseMaterialType = None
                    self._CaseThickness = None
                    self._CaseType = None
                    self._CatalogNumber = None
                    self._CDRWDescription = None
                    self._ChainType = None
                    self._ClaspType = None
                    self._ClothingSize = None
                    self._Color = None
                    self._Compatibility = None
                    self._ComputerHardwareType = None
                    self._ComputerPlatform = None
                    self._Connectivity = None
                    self._ContinuousShootingSpeed = None
                    self._Country = None
                    self._CountryOfOrigin = None
                    self._CPUManufacturer = None
                    self._CPUSpeed = None
                    self._CPUType = None
                    self._Creator = []
                    self._Cuisine = None
                    self._Customizable = None
                    self._DelayBetweenShots = None
                    self._DeliveryOption = None
                    self._Department = None
                    self._Description = None
                    self._DeweyDecimalNumber = None
                    self._DialColor = None
                    self._DialWindowMaterialType = None
                    self._DigitalZoom = None
                    self._Director = []
                    self._DisplaySize = None
                    self._DrumSetPieceQuantity = None
                    self._DVDLayers = None
                    self._DVDRWDescription = None
                    self._DVDSides = None
                    self._DPCI = None
                    self._EAN = None
                    self._Edition = None
                    self._ESRBAgeRating = None
                    self._ExternalDisplaySupportDescription = None
                    self._FabricType = None
                    self._FaxNumber = None
                    self._Feature = []
                    self._FirstIssueLeadTime = None
                    self._FloppyDiskDriveDescription = None
                    self._Format = []
                    self._FixedShippingCharge = None
                    self._GemType = None
                    self._GraphicsCardInterface = None
                    self._GraphicsDescription = None
                    self._GraphicsMemorySize = None
                    self._GuitarAttribute = None
                    self._GuitarBridgeSystem = None
                    self._GuitarPickThickness = None
                    self._GuitarPickupConfiguration = None
                    self._HardDiskCount = None
                    self._HardDiskSize = None
                    self._HasAutoFocus = None
                    self._HasBurstMode = None
                    self._HasInCameraEditing = None
                    self._HasRedEyeReduction = None
                    self._HasSelfTimer = None
                    self._HasTripodMount = None
                    self._HasVideoOut = None
                    self._HasViewfinder = None
                    self._HazardousMaterialType = None
                    self._HoursOfOperation = None
                    self._IncludedSoftware = None
                    self._IncludesMp3Player = None
                    self._Indications = None
                    self._Ingredients = None
                    self._InstrumentKey = None
                    self._IsAutographed = None
                    self._ISBN = None
                    self._IsFragile = None
                    self._IsLabCreated = None
                    self._IsMemorabilia = None
                    self._ISOEquivalent = None
                    self._IssuesPerYear = None
                    self._ItemDimensions = None
                    self._KeyboardDescription = None
                    self._Label = None
                    self._Languages = None
                    self._LegalDisclaimer = None
                    self._LineVoltage = None
                    self._ListPrice = None
                    self._MacroFocusRange = None
                    self._MagazineType = None
                    self._MalletHardness = None
                    self._Manufacturer = None
                    self._ManufacturerLaborWarrantyDescription = None
                    self._ManufacturerMaximumAge = None
                    self._ManufacturerMinimumAge = None
                    self._ManufacturerPartsWarrantyDescription = None
                    self._MaterialType = None
                    self._MaximumAperture = None
                    self._MaximumColorDepth = None
                    self._MaximumFocalLength = None
                    self._MaximumHighResolutionImages = None
                    self._MaximumHorizontalResolution = None
                    self._MaximumLowResolutionImages = None
                    self._MaximumResolution = None
                    self._MaximumShutterSpeed = None
                    self._MaximumVerticalResolution = None
                    self._MaximumWeightRecommendation = None
                    self._MemorySlotsAvailable = None
                    self._MetalStamp = None
                    self._MetalType = None
                    self._MiniMovieDescription = None
                    self._MinimumFocalLength = None
                    self._MinimumShutterSpeed = None
                    self._Model = None
                    self._ModelYear = None
                    self._ModemDescription = None
                    self._MonitorSize = None
                    self._MonitorViewableDiagonalSize = None
                    self._MouseDescription = None
                    self._MPN = None
                    self._MusicalStyle = None
                    self._NativeResolution = None
                    self._Neighborhood = None
                    self._NetworkInterfaceDescription = None
                    self._NotebookDisplayTechnology = None
                    self._NotebookPointingDeviceDescription = None
                    self._NumberOfDiscs = None
                    self._NumberOfIssues = None
                    self._NumberOfItems = None
                    self._NumberOfKeys = None
                    self._NumberOfPages = None
                    self._NumberOfPearls = None
                    self._NumberOfRapidFireShots = None
                    self._NumberOfStones = None
                    self._NumberOfStrings = None
                    self._NumberOfTracks = None
                    self._OpticalZoom = None
                    self._OriginalReleaseDate = None
                    self._OutputWattage = None
                    self._PackageDimensions = None
                    self._PearlLustre = None
                    self._PearlMinimumColor = None
                    self._PearlShape = None
                    self._PearlStringingMethod = None
                    self._PearlSurfaceBlemishes = None
                    self._PearlType = None
                    self._PearlUniformity = None
                    self._PhoneNumber = None
                    self._PhotoFlashType = []
                    self._PictureFormat = []
                    self._Platform = []
                    self._PriceRating = None
                    self._ProcessorCount = None
                    self._ProductGroup = None
                    self._PromotionalTag = None
                    self._POBoxShippingExcluded = None
                    self._PublicationDate = None
                    self._Publisher = None
                    self._PurchasingChannel = []
                    self._ReadingLevel = None
                    self._RecorderTrackCount = None
                    self._RegionCode = None
                    self._RegionOfOrigin = None
                    self._ReleaseDate = None
                    self._ReturnMethod = []
                    self._RemovableMemory = None
                    self._ResolutionModes = None
                    self._ReturnPolicy = None
                    self._RingSize = None
                    self._SafetyWarning = None
                    self._SalesRestriction = None
                    self._SecondaryCacheSize = None
                    self._SettingType = None
                    self._Size = None
                    self._SKU = None
                    self._SoldInStores = None
                    self._SizePerPearl = None
                    self._SkillLevel = None
                    self._SoundCardDescription = None
                    self._SpeakerCount = None
                    self._SpeakerDescription = None
                    self._SpecialFeatures = []
                    self._StoneClarity = None
                    self._StoneColor = None
                    self._StoneCut = None
                    self._StoneShape = None
                    self._StoneWeight = None
                    self._Studio = None
                    self._SubscriptionLength = None
                    self._SupportedImageType = []
                    self._SystemBusSpeed = None
                    self._SystemMemorySizeMax = None
                    self._SystemMemorySize = None
                    self._SystemMemoryType = None
                    self._TellingPageIndicator = None
                    self._TheatricalReleaseDate = None
                    self._Title = None
                    self._TotalDiamondWeight = None
                    self._TotalExternalBaysFree = None
                    self._TotalFirewirePorts = None
                    self._TotalGemWeight = None
                    self._TotalInternalBaysFree = None
                    self._TotalMetalWeight = None
                    self._TotalNTSCPALPorts = None
                    self._TotalParallelPorts = None
                    self._TotalPCCardSlots = None
                    self._TotalPCISlotsFree = None
                    self._TotalSerialPorts = None
                    self._TotalSVideoOutPorts = None
                    self._TotalUSB2Ports = None
                    self._TotalUSBPorts = None
                    self._TotalVGAOutPorts = None
                    self._UPC = None
                    self._VariationDenomination = None
                    self._VariationDescription = None
                    self._VendorRebate = None
                    self._Warranty = None
                    self._WatchMovementType = None
                    self._WebsiteBuyability = None
                    self._WaterResistanceDepth = None
                    self._WirelessMicrophoneFrequency = None
                    return
            Holder.__name__ = "MerchantItemAttributes_Holder"
            self.pyclass = Holder


        class Creator_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Creator"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.MerchantItemAttributes_Dec.Creator_Dec.schema
                TClist = []
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Creator")
                kw["aname"] = "_Creator"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        return
                Holder.__name__ = "Creator_Holder"
                self.pyclass = Holder





        class ItemDimensions_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "ItemDimensions"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.MerchantItemAttributes_Dec.ItemDimensions_Dec.schema
                TClist = [GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Height"), aname="_Height", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Length"), aname="_Length", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Weight"), aname="_Weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Width"), aname="_Width", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","ItemDimensions")
                kw["aname"] = "_ItemDimensions"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Height = None
                        self._Length = None
                        self._Weight = None
                        self._Width = None
                        return
                Holder.__name__ = "ItemDimensions_Holder"
                self.pyclass = Holder





        class Languages_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "Languages"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.MerchantItemAttributes_Dec.Languages_Dec.schema
                TClist = [self.__class__.Language_Dec(minOccurs=0, maxOccurs="unbounded", nillable=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Languages")
                kw["aname"] = "_Languages"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Language = []
                        return
                Holder.__name__ = "Languages_Holder"
                self.pyclass = Holder


            class Language_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
                literal = "Language"
                schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
                def __init__(self, **kw):
                    ns = ns0.MerchantItemAttributes_Dec.Languages_Dec.Language_Dec.schema
                    TClist = [ZSI.TC.String(pname=(ns,"Name"), aname="_Name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Type"), aname="_Type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AudioFormat"), aname="_AudioFormat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                    kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","Language")
                    kw["aname"] = "_Language"
                    self.attribute_typecode_dict = {}
                    ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                    class Holder:
                        __metaclass__ = pyclass_type
                        typecode = self
                        def __init__(self):
                            # pyclass
                            self._Name = None
                            self._Type = None
                            self._AudioFormat = None
                            return
                    Holder.__name__ = "Language_Holder"
                    self.pyclass = Holder








        class PackageDimensions_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "PackageDimensions"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.MerchantItemAttributes_Dec.PackageDimensions_Dec.schema
                TClist = [GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Height"), aname="_Height", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Length"), aname="_Length", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Weight"), aname="_Weight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://webservices.amazon.com/AWSECommerceService/2007-01-15","DecimalWithUnits",lazy=True)(pname=(ns,"Width"), aname="_Width", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","PackageDimensions")
                kw["aname"] = "_PackageDimensions"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Height = None
                        self._Length = None
                        self._Weight = None
                        self._Width = None
                        return
                Holder.__name__ = "PackageDimensions_Holder"
                self.pyclass = Holder





        class VendorRebate_Dec(ZSI.TCcompound.ComplexType, LocalElementDeclaration):
            literal = "VendorRebate"
            schema = "http://webservices.amazon.com/AWSECommerceService/2007-01-15"
            def __init__(self, **kw):
                ns = ns0.MerchantItemAttributes_Dec.VendorRebate_Dec.schema
                TClist = [ZSI.TC.String(pname=(ns,"Type"), aname="_Type", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"StartDate"), aname="_StartDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"EndDate"), aname="_EndDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
                kw["pname"] = ("http://webservices.amazon.com/AWSECommerceService/2007-01-15","VendorRebate")
                kw["aname"] = "_VendorRebate"
                self.attribute_typecode_dict = {}
                ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
                class Holder:
                    __metaclass__ = pyclass_type
                    typecode = self
                    def __init__(self):
                        # pyclass
                        self._Type = None
                        self._StartDate = None
                        self._EndDate = None
                        return
                Holder.__name__ = "VendorRebate_Holder"
                self.pyclass = Holder




# end class ns0 (tns: http://webservices.amazon.com/AWSECommerceService/2007-01-15)
